
Kochab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f84  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068e0  080068e0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068e8  080068e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068e8  080068e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068ec  080068ec  000168ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080068f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bac  20000088  08006978  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003c34  08006978  00023c34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2cf  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7e  00000000  00000000  0002b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001229f  00000000  00000000  0002e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c41b  00000000  00000000  00040687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689b4  00000000  00000000  0004caa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a4c  00000000  00000000  000b54a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004944 	.word	0x08004944

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08004944 	.word	0x08004944

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <bgfx_setup>:
/* Public Functions */
// Set up Brendan's Graphics Library
// bgfx_properties * bgfx_properties: Properties to initialize with.
// Returns 0 on success, -1 on failure.
int bgfx_setup(bgfx_properties * bgfx_properties)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
   if (bgfx_properties == NULL || bgfx_properties->map == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d003      	beq.n	80006a6 <bgfx_setup+0x16>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <bgfx_setup+0x1c>
   {
      return -1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	425b      	negs	r3, r3
 80006aa:	e015      	b.n	80006d8 <bgfx_setup+0x48>
   }

   _bgfx_global_props.user.px_width = bgfx_properties->px_width;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <bgfx_setup+0x50>)
 80006b2:	601a      	str	r2, [r3, #0]
   _bgfx_global_props.user.px_height = bgfx_properties->px_height;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <bgfx_setup+0x50>)
 80006ba:	605a      	str	r2, [r3, #4]
   _bgfx_global_props.user.map = bgfx_properties->map;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <bgfx_setup+0x50>)
 80006c2:	609a      	str	r2, [r3, #8]

   _bgfx_global_props.bytes_per_row =
      (_bgfx_global_props.user.px_width / (sizeof(uint8_t) * 8));
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <bgfx_setup+0x50>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	001a      	movs	r2, r3
   _bgfx_global_props.bytes_per_row =
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <bgfx_setup+0x50>)
 80006ce:	615a      	str	r2, [r3, #20]

   _bgfx_global_props.initialized = true;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <bgfx_setup+0x50>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	741a      	strb	r2, [r3, #16]
   return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000

080006e4 <_bgfx_add_point>:

// Add a point at (x,y) on the user map without error-checking.
// int x: x-coordinate of user map.
// int y: y-coordinate of user map.
void _bgfx_add_point(int x, int y)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
   int offset = 0, index = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
   int bit_pos = (y - 1) * (_bgfx_global_props.bytes_per_row * 8) + (x - 1);
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <_bgfx_add_point+0x74>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	3a01      	subs	r2, #1
 80006fe:	4353      	muls	r3, r2
 8000700:	00da      	lsls	r2, r3, #3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3b01      	subs	r3, #1
 8000706:	18d3      	adds	r3, r2, r3
 8000708:	60fb      	str	r3, [r7, #12]

   index = bit_pos / 8;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b00      	cmp	r3, #0
 800070e:	da00      	bge.n	8000712 <_bgfx_add_point+0x2e>
 8000710:	3307      	adds	r3, #7
 8000712:	10db      	asrs	r3, r3, #3
 8000714:	613b      	str	r3, [r7, #16]
   offset = bit_pos % 8;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <_bgfx_add_point+0x78>)
 800071a:	4013      	ands	r3, r2
 800071c:	d504      	bpl.n	8000728 <_bgfx_add_point+0x44>
 800071e:	3b01      	subs	r3, #1
 8000720:	2208      	movs	r2, #8
 8000722:	4252      	negs	r2, r2
 8000724:	4313      	orrs	r3, r2
 8000726:	3301      	adds	r3, #1
 8000728:	617b      	str	r3, [r7, #20]

   _bgfx_global_props.user.map[index] |= (0x80 >> offset);
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <_bgfx_add_point+0x74>)
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b25a      	sxtb	r2, r3
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4119      	asrs	r1, r3
 800073c:	000b      	movs	r3, r1
 800073e:	b25b      	sxtb	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b259      	sxtb	r1, r3
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <_bgfx_add_point+0x74>)
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	18d3      	adds	r3, r2, r3
 800074c:	b2ca      	uxtb	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	80000007 	.word	0x80000007

08000760 <bgfx_set_font>:
/* Public Functions */
// Set the font in global properties
// bgfx_font * font: Desired font struct.
// Returns 0 on success, -1 on failure.
int bgfx_set_font(bgfx_font const * font)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
   // Check if library initialized
   if (!_bgfx_global_props.initialized)
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <bgfx_set_font+0x2c>)
 800076a:	7c1b      	ldrb	r3, [r3, #16]
 800076c:	2201      	movs	r2, #1
 800076e:	4053      	eors	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <bgfx_set_font+0x1c>
   {
      return -1;
 8000776:	2301      	movs	r3, #1
 8000778:	425b      	negs	r3, r3
 800077a:	e003      	b.n	8000784 <bgfx_set_font+0x24>
   }

   _bgfx_global_props.font = font;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <bgfx_set_font+0x2c>)
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	60da      	str	r2, [r3, #12]

   return 0;
 8000782:	2300      	movs	r3, #0
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000

08000790 <_bgfx_get_index_of_char>:
// For a given character, get the index of that character in font->map.
// bgfx_font * font: Dersired font.
// char character: Character to get the index of.
// Returns the index.
int _bgfx_get_index_of_char(bgfx_font const * font, char character)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	000a      	movs	r2, r1
 800079a:	1cfb      	adds	r3, r7, #3
 800079c:	701a      	strb	r2, [r3, #0]
   // If invalid char passed, return the index of ' '
   if (character < ' ' || character > '~')
 800079e:	1cfb      	adds	r3, r7, #3
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b1f      	cmp	r3, #31
 80007a4:	d903      	bls.n	80007ae <_bgfx_get_index_of_char+0x1e>
 80007a6:	1cfb      	adds	r3, r7, #3
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b7e      	cmp	r3, #126	; 0x7e
 80007ac:	d901      	bls.n	80007b2 <_bgfx_get_index_of_char+0x22>
   {
      return 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e009      	b.n	80007c6 <_bgfx_get_index_of_char+0x36>
   }

   // Get the character's offset, then multiply by height and bytes per row
   return ((character - ' ') * font->bytes_per_row * font->px_height);
 80007b2:	1cfb      	adds	r3, r7, #3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3b20      	subs	r3, #32
 80007b8:	001a      	movs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	435a      	muls	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4353      	muls	r3, r2
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}

080007ce <bgfx_draw_string>:
// char * string: string to draw
// int x: x-coordinate of user map.
// int y: y-coordinate of user map.
// Returns 0 on success, -1 on failure.
int bgfx_draw_string(char * string, int x, int y)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af02      	add	r7, sp, #8
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
   return bgfx_draw_string_modified_padding(string, 1, 1, x, y);
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	0013      	movs	r3, r2
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	f000 f806 	bl	80007f8 <bgfx_draw_string_modified_padding>
 80007ec:	0003      	movs	r3, r0
}
 80007ee:	0018      	movs	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <bgfx_draw_string_modified_padding>:
// int x: x-coordinate of user map.
// int y: y-coordinate of user map.
// Returns 0 on success, -1 on failure.
int bgfx_draw_string_modified_padding(char * string, int size_modifier,
   int pad, int x, int y)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
   if (string == NULL)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <bgfx_draw_string_modified_padding+0x1a>
   {
      return -1;
 800080c:	2301      	movs	r3, #1
 800080e:	425b      	negs	r3, r3
 8000810:	e027      	b.n	8000862 <bgfx_draw_string_modified_padding+0x6a>
   }

   if (size_modifier < 1)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dc02      	bgt.n	800081e <bgfx_draw_string_modified_padding+0x26>
   {
      return -1;
 8000818:	2301      	movs	r3, #1
 800081a:	425b      	negs	r3, r3
 800081c:	e021      	b.n	8000862 <bgfx_draw_string_modified_padding+0x6a>
   }

   int next_x = x;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	617b      	str	r3, [r7, #20]

   for (int i = 0; string[i] != '\0'; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	e015      	b.n	8000854 <bgfx_draw_string_modified_padding+0x5c>
   {
      _bgfx_draw_letter(string[i], size_modifier, next_x, y);
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	7818      	ldrb	r0, [r3, #0]
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	f000 f855 	bl	80008e4 <_bgfx_draw_letter>
      next_x += (_bgfx_global_props.font->px_width * size_modifier) + pad;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <bgfx_draw_string_modified_padding+0x74>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	435a      	muls	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	18d3      	adds	r3, r2, r3
 800084c:	617b      	str	r3, [r7, #20]
   for (int i = 0; string[i] != '\0'; i++)
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	3301      	adds	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1e3      	bne.n	8000828 <bgfx_draw_string_modified_padding+0x30>
   }

   return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b006      	add	sp, #24
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000000 	.word	0x20000000

08000870 <_bgfx_letter_point>:
// uint8_t const * letter: letter map to check
// int x: x-coordinate of letter map.
// int y: y-coordinate of letter map.
// Returns true if pixel present, false if not.
bool _bgfx_letter_point(uint8_t const * letter, int x, int y)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
   int offset = 0, index = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
   int bit_pos = bit_pos = (y - 1) * _bgfx_global_props.font->bytes_per_row * 8
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <_bgfx_letter_point+0x6c>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4353      	muls	r3, r2
 8000890:	00da      	lsls	r2, r3, #3
      + (x - 1);
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	3b01      	subs	r3, #1
   int bit_pos = bit_pos = (y - 1) * _bgfx_global_props.font->bytes_per_row * 8
 8000896:	18d3      	adds	r3, r2, r3
 8000898:	617b      	str	r3, [r7, #20]

   index = bit_pos / 8;
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b00      	cmp	r3, #0
 800089e:	da00      	bge.n	80008a2 <_bgfx_letter_point+0x32>
 80008a0:	3307      	adds	r3, #7
 80008a2:	10db      	asrs	r3, r3, #3
 80008a4:	61bb      	str	r3, [r7, #24]
   offset = bit_pos % 8;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <_bgfx_letter_point+0x70>)
 80008aa:	4013      	ands	r3, r2
 80008ac:	d504      	bpl.n	80008b8 <_bgfx_letter_point+0x48>
 80008ae:	3b01      	subs	r3, #1
 80008b0:	2208      	movs	r2, #8
 80008b2:	4252      	negs	r2, r2
 80008b4:	4313      	orrs	r3, r2
 80008b6:	3301      	adds	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]

   return (letter[index] & (0x80 >> offset));
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	18d3      	adds	r3, r2, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0019      	movs	r1, r3
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	411a      	asrs	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	400b      	ands	r3, r1
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	4193      	sbcs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b008      	add	sp, #32
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	80000007 	.word	0x80000007

080008e4 <_bgfx_draw_letter>:
// int size_modifier: Size modifier for the character (multiples of 2)
// int x: x-coordinate of user map.
// int y: y-coordinate of user map.
// Returns 0 on success, -1 on failure.
void _bgfx_draw_letter(char letter, int size_modifier, int x, int y)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08b      	sub	sp, #44	; 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	210f      	movs	r1, #15
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	1c02      	adds	r2, r0, #0
 80008f6:	701a      	strb	r2, [r3, #0]
   int letter_width = _bgfx_global_props.font->px_width;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <_bgfx_draw_letter+0xd4>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	61bb      	str	r3, [r7, #24]
   int letter_height = _bgfx_global_props.font->px_height;
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <_bgfx_draw_letter+0xd4>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	617b      	str	r3, [r7, #20]
   uint8_t const * letter_map = _bgfx_global_props.font->map;
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <_bgfx_draw_letter+0xd4>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	613b      	str	r3, [r7, #16]
   letter_map += _bgfx_get_index_of_char(_bgfx_global_props.font, letter);
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <_bgfx_draw_letter+0xd4>)
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	187b      	adds	r3, r7, r1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	0019      	movs	r1, r3
 800091a:	0010      	movs	r0, r2
 800091c:	f7ff ff38 	bl	8000790 <_bgfx_get_index_of_char>
 8000920:	0003      	movs	r3, r0
 8000922:	001a      	movs	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	189b      	adds	r3, r3, r2
 8000928:	613b      	str	r3, [r7, #16]

   for (int j = 1; j <= (letter_height * size_modifier); j++)
 800092a:	2301      	movs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	e038      	b.n	80009a2 <_bgfx_draw_letter+0xbe>
   {
      for (int i = 1; i <= (letter_width * size_modifier); i++)
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	e02c      	b.n	8000990 <_bgfx_draw_letter+0xac>
      {
         if (_bgfx_letter_point(letter_map, i / size_modifier, j / size_modifier))
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	6a38      	ldr	r0, [r7, #32]
 800093a:	f7ff fc79 	bl	8000230 <__divsi3>
 800093e:	0003      	movs	r3, r0
 8000940:	001c      	movs	r4, r3
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000946:	f7ff fc73 	bl	8000230 <__divsi3>
 800094a:	0003      	movs	r3, r0
 800094c:	001a      	movs	r2, r3
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	0021      	movs	r1, r4
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff ff8c 	bl	8000870 <_bgfx_letter_point>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d016      	beq.n	800098a <_bgfx_draw_letter+0xa6>
         {
            for (int k = 0; k < size_modifier; k++)
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	e00f      	b.n	8000982 <_bgfx_draw_letter+0x9e>
            {
               _bgfx_add_point(i + x + k, j + y + k);
 8000962:	6a3a      	ldr	r2, [r7, #32]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	18d2      	adds	r2, r2, r3
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	18d0      	adds	r0, r2, r3
 800096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	18d2      	adds	r2, r2, r3
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	18d3      	adds	r3, r2, r3
 8000976:	0019      	movs	r1, r3
 8000978:	f7ff feb4 	bl	80006e4 <_bgfx_add_point>
            for (int k = 0; k < size_modifier; k++)
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	3301      	adds	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	429a      	cmp	r2, r3
 8000988:	dbeb      	blt.n	8000962 <_bgfx_draw_letter+0x7e>
      for (int i = 1; i <= (letter_width * size_modifier); i++)
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	3301      	adds	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	4353      	muls	r3, r2
 8000996:	6a3a      	ldr	r2, [r7, #32]
 8000998:	429a      	cmp	r2, r3
 800099a:	ddcc      	ble.n	8000936 <_bgfx_draw_letter+0x52>
   for (int j = 1; j <= (letter_height * size_modifier); j++)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	4353      	muls	r3, r2
 80009a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009aa:	429a      	cmp	r2, r3
 80009ac:	ddc0      	ble.n	8000930 <_bgfx_draw_letter+0x4c>
            }
         }
      }
   }
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b00b      	add	sp, #44	; 0x2c
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	20000000 	.word	0x20000000

080009bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	1d39      	adds	r1, r7, #4
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <__io_putchar+0x20>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	f002 fa1f 	bl	8002e10 <HAL_UART_Transmit>
  return ch;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20003b94 	.word	0x20003b94

080009e0 <COG_on>:
 * 8. Delay 5ms
 * 9. Soft reset (SPI 0x00, 0x0E)
 * 10.Delay 5ms
 * End
 */
int COG_on(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(EPD_PWR_PORT, EPD_PWR_PIN, GPIO_PIN_SET);
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <COG_on+0x7c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	2104      	movs	r1, #4
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 f819 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80009f0:	2005      	movs	r0, #5
 80009f2:	f000 fda3 	bl	800153c <HAL_Delay>
  HAL_GPIO_WritePin(EPD_RST_PORT, EPD_RST_PIN, GPIO_PIN_SET);
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	2201      	movs	r2, #1
 80009fc:	2110      	movs	r1, #16
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 f80f 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000a04:	2005      	movs	r0, #5
 8000a06:	f000 fd99 	bl	800153c <HAL_Delay>
  HAL_GPIO_WritePin(EPD_RST_PORT, EPD_RST_PIN, GPIO_PIN_RESET);
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2110      	movs	r1, #16
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 f805 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f000 fd8f 	bl	800153c <HAL_Delay>
  HAL_GPIO_WritePin(EPD_RST_PORT, EPD_RST_PIN, GPIO_PIN_SET);
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2201      	movs	r2, #1
 8000a24:	2110      	movs	r1, #16
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fffb 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000a2c:	2005      	movs	r0, #5
 8000a2e:	f000 fd85 	bl	800153c <HAL_Delay>

  // Send soft reset command
  COG_send_index_data(0x00, &REGISTER_DATA[1], sizeof(REGISTER_DATA[1]));
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <COG_on+0x80>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	0019      	movs	r1, r3
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 f8b1 	bl	8000ba0 <COG_send_index_data>

  HAL_Delay(5);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f000 fd7c 	bl	800153c <HAL_Delay>
  HAL_GPIO_WritePin(EPD_RST_PORT, EPD_RST_PIN, GPIO_PIN_SET);
 8000a44:	23a0      	movs	r3, #160	; 0xa0
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 ffe8 	bl	8001a22 <HAL_GPIO_WritePin>

  return 0;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	50000800 	.word	0x50000800
 8000a60:	080067d5 	.word	0x080067d5

08000a64 <COG_init>:
 * 1. Input temperature (SPI 0xE5, 0x19)
 * 2. Active temperature (SPI 0xE0, 0x02)
 * 3. Panel settings (SPI 0x00, 0x0F 0x89)
 * End
 */
int COG_init(uint8_t input_temp) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	701a      	strb	r2, [r3, #0]
  // Send input temperature
  COG_send_index_data(0xE5, &input_temp, sizeof(input_temp));
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	2201      	movs	r2, #1
 8000a74:	0019      	movs	r1, r3
 8000a76:	20e5      	movs	r0, #229	; 0xe5
 8000a78:	f000 f892 	bl	8000ba0 <COG_send_index_data>

  // Send active temperature
  COG_send_index_data(0xE0, &REGISTER_DATA[3], sizeof(REGISTER_DATA[3]));
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <COG_init+0x3c>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	0019      	movs	r1, r3
 8000a82:	20e0      	movs	r0, #224	; 0xe0
 8000a84:	f000 f88c 	bl	8000ba0 <COG_send_index_data>

  // Send PSR
  COG_send_index_data(0x00, &REGISTER_DATA[4], sizeof(REGISTER_DATA[4] * 2));
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <COG_init+0x40>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f886 	bl	8000ba0 <COG_send_index_data>

  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	080067d7 	.word	0x080067d7
 8000aa4:	080067d8 	.word	0x080067d8

08000aa8 <COG_update>:
 * 13.Send last byte
 * 14.CS high
 * 15.Repeat 1-14 with second frame (address 0x13, all bytes 0x00 for 15000 bytes)
 * End
 */
int COG_update(uint8_t * data) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]

  ret = COG_send_index_data(0x10, data, 15000);
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <COG_update+0x94>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	0019      	movs	r1, r3
 8000aba:	2010      	movs	r0, #16
 8000abc:	f000 f870 	bl	8000ba0 <COG_send_index_data>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	60fb      	str	r3, [r7, #12]
  ret = COG_send_index_data(0x13, image_map, 15000);
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <COG_update+0x94>)
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <COG_update+0x98>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	2013      	movs	r0, #19
 8000acc:	f000 f868 	bl	8000ba0 <COG_send_index_data>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	60fb      	str	r3, [r7, #12]

  while(HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET) {
 8000ad4:	e002      	b.n	8000adc <COG_update+0x34>
    HAL_Delay(2);
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f000 fd30 	bl	800153c <HAL_Delay>
  while(HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET) {
 8000adc:	23a0      	movs	r3, #160	; 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 ff80 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d0f4      	beq.n	8000ad6 <COG_update+0x2e>
  }

  // Send power on command
  COG_send_index_data(0x04, NULL, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2004      	movs	r0, #4
 8000af2:	f000 f855 	bl	8000ba0 <COG_send_index_data>

  while(HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET){
 8000af6:	e002      	b.n	8000afe <COG_update+0x56>
    HAL_Delay(2);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f000 fd1f 	bl	800153c <HAL_Delay>
  while(HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET){
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2101      	movs	r1, #1
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 ff6f 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d0f4      	beq.n	8000af8 <COG_update+0x50>
  }

  COG_send_index_data(0x12, NULL, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2012      	movs	r0, #18
 8000b14:	f000 f844 	bl	8000ba0 <COG_send_index_data>

  while(HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET){
 8000b18:	e002      	b.n	8000b20 <COG_update+0x78>
    HAL_Delay(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fd0e 	bl	800153c <HAL_Delay>
  while(HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET){
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	2101      	movs	r1, #1
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 ff5e 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d0f4      	beq.n	8000b1a <COG_update+0x72>
  }

  return ret;
 8000b30:	68fb      	ldr	r3, [r7, #12]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	00003a98 	.word	0x00003a98
 8000b40:	200000a4 	.word	0x200000a4

08000b44 <COG_off>:
 * 6. Set BUSY to output, set low (reconfig as output and set low)
 * 7. Delay 150 ms
 * 8. Set RESET to output low
 * End
 */
int COG_off(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  COG_send_index_data(0x02, NULL, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f000 f827 	bl	8000ba0 <COG_send_index_data>

  while (HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET) {
 8000b52:	e002      	b.n	8000b5a <COG_off+0x16>
    HAL_Delay(2);
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fcf1 	bl	800153c <HAL_Delay>
  while (HAL_GPIO_ReadPin(EPD_BUSY_PORT, EPD_BUSY_PIN) == GPIO_PIN_RESET) {
 8000b5a:	23a0      	movs	r3, #160	; 0xa0
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	2101      	movs	r1, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 ff41 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d0f4      	beq.n	8000b54 <COG_off+0x10>
  }

  HAL_GPIO_WritePin(EPD_RST_PORT, EPD_RST_PIN, GPIO_PIN_RESET);
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2110      	movs	r1, #16
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 ff55 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <COG_off+0x54>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 ff4f 	bl	8001a22 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(EPD_PWR_PORT, EPD_PWR_PIN, GPIO_PIN_RESET);
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <COG_off+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	2104      	movs	r1, #4
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 ff49 	bl	8001a22 <HAL_GPIO_WritePin>

  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	50000400 	.word	0x50000400
 8000b9c:	50000800 	.word	0x50000800

08000ba0 <COG_send_index_data>:

int COG_send_index_data(uint8_t index, uint8_t * data, uint32_t len) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	240f      	movs	r4, #15
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  unsigned int i = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]

  // DC low, CS low
  HAL_GPIO_WritePin(EPD_DC_PORT, EPD_DC_PIN, GPIO_PIN_RESET);
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 ff2f 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <COG_send_index_data+0xf0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 ff29 	bl	8001a22 <HAL_GPIO_WritePin>

  // Send reg address
  HAL_SPI_Transmit(&hspi1, &index, sizeof(index), HAL_MAX_DELAY);
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	1939      	adds	r1, r7, r4
 8000bd6:	482f      	ldr	r0, [pc, #188]	; (8000c94 <COG_send_index_data+0xf4>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f001 fe94 	bl	8002906 <HAL_SPI_Transmit>

  // CS high, DC high
  HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_SET);
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <COG_send_index_data+0xf0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 ff1c 	bl	8001a22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EPD_DC_PORT, EPD_DC_PIN, GPIO_PIN_SET);
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 ff15 	bl	8001a22 <HAL_GPIO_WritePin>

  // CS low
  HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <COG_send_index_data+0xf0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 ff0f 	bl	8001a22 <HAL_GPIO_WritePin>

  if (data != NULL) {
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d01f      	beq.n	8000c4a <COG_send_index_data+0xaa>
    for (i = 0; i < len; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e017      	b.n	8000c40 <COG_send_index_data+0xa0>
      // CS low
      HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <COG_send_index_data+0xf0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	; 0x40
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 ff03 	bl	8001a22 <HAL_GPIO_WritePin>

      // Send image byte
      HAL_SPI_Transmit(&hspi1, &data[i], sizeof(data[i]), HAL_MAX_DELAY);
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	18d1      	adds	r1, r2, r3
 8000c22:	2301      	movs	r3, #1
 8000c24:	425b      	negs	r3, r3
 8000c26:	481b      	ldr	r0, [pc, #108]	; (8000c94 <COG_send_index_data+0xf4>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f001 fe6c 	bl	8002906 <HAL_SPI_Transmit>

      // CS high
      HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_SET);
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <COG_send_index_data+0xf0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fef4 	bl	8001a22 <HAL_GPIO_WritePin>
    for (i = 0; i < len; i++) {
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3e3      	bcc.n	8000c10 <COG_send_index_data+0x70>
 8000c48:	e01c      	b.n	8000c84 <COG_send_index_data+0xe4>
    }
  } else {
    for (i = 0; i < len; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e015      	b.n	8000c7c <COG_send_index_data+0xdc>
      // CS low
      HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <COG_send_index_data+0xf0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fee3 	bl	8001a22 <HAL_GPIO_WritePin>

      // Send zero byte
      HAL_SPI_Transmit(&hspi1, 0x00, sizeof(uint8_t), HAL_MAX_DELAY);
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	425b      	negs	r3, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <COG_send_index_data+0xf4>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	2100      	movs	r1, #0
 8000c66:	f001 fe4e 	bl	8002906 <HAL_SPI_Transmit>

      // CS high
      HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_SET);
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <COG_send_index_data+0xf0>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fed6 	bl	8001a22 <HAL_GPIO_WritePin>
    for (i = 0; i < len; i++) {
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d3e5      	bcc.n	8000c50 <COG_send_index_data+0xb0>
    }
  }

  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b007      	add	sp, #28
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	50000400 	.word	0x50000400
 8000c94:	20003b3c 	.word	0x20003b3c

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fbdd 	bl	800145c <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f891 	bl	8000dc8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f000 f963 	bl	8000f70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000caa:	f000 f8f9 	bl	8000ea0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cae:	f000 f92f 	bl	8000f10 <MX_USART2_UART_Init>


  HAL_Delay(50);
 8000cb2:	2032      	movs	r0, #50	; 0x32
 8000cb4:	f000 fc42 	bl	800153c <HAL_Delay>

  bgfx_properties my_props = {
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <main+0x10c>)
 8000cbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000cbe:	c313      	stmia	r3!, {r0, r1, r4}
     .px_width = 400,
     .px_height = 300,
     .map = image_map
  };
  bgfx_setup(&my_props);
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fce4 	bl	8000690 <bgfx_setup>
  bgfx_set_font(&BGFX_ATARI_16);
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <main+0x110>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fd48 	bl	8000760 <bgfx_set_font>

  static const uint8_t INPUT_TEMP = 0x19;
	uint8_t ret = 0;
 8000cd0:	2413      	movs	r4, #19
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]

	// Make sure DC high, RST high, CS high
	HAL_GPIO_WritePin(EPD_DC_PORT, EPD_DC_PIN, GPIO_PIN_SET);
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2102      	movs	r1, #2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fe9e 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_PORT, EPD_RST_PIN, GPIO_PIN_SET);
 8000ce6:	23a0      	movs	r3, #160	; 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	2201      	movs	r2, #1
 8000cec:	2110      	movs	r1, #16
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 fe97 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CS_PORT, SPI1_CS_PIN, GPIO_PIN_SET);
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <main+0x114>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fe91 	bl	8001a22 <HAL_GPIO_WritePin>

	printf("Clock start: %lu\r\n", HAL_GetTick());
 8000d00:	f000 fc12 	bl	8001528 <HAL_GetTick>
 8000d04:	0002      	movs	r2, r0
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <main+0x118>)
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f002 fdc6 	bl	800389c <iprintf>

	ret += COG_on();
 8000d10:	f7ff fe66 	bl	80009e0 <COG_on>
 8000d14:	0003      	movs	r3, r0
 8000d16:	b2d9      	uxtb	r1, r3
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	188a      	adds	r2, r1, r2
 8000d20:	701a      	strb	r2, [r3, #0]
	printf("Ret from COG on\r\n");
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <main+0x11c>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f002 fe45 	bl	80039b4 <puts>

	ret += COG_init(INPUT_TEMP);
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <main+0x120>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fe98 	bl	8000a64 <COG_init>
 8000d34:	0003      	movs	r3, r0
 8000d36:	b2d9      	uxtb	r1, r3
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	193a      	adds	r2, r7, r4
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	188a      	adds	r2, r1, r2
 8000d40:	701a      	strb	r2, [r3, #0]
	printf("Ret from COG init\r\n");
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <main+0x124>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fe35 	bl	80039b4 <puts>
	bgfx_draw_box(2,398,2,298);

	int rv = EI_update_image(my_props.map);
	*/

	for (int i = 0; i < 5; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e012      	b.n	8000d76 <main+0xde>
	{
		bgfx_draw_string("String", 2 + (i * 40), 2);
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	0013      	movs	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1c99      	adds	r1, r3, #2
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <main+0x128>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fd34 	bl	80007ce <bgfx_draw_string>
		COG_update(my_props.map);
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fe9c 	bl	8000aa8 <COG_update>
	for (int i = 0; i < 5; i++)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	dde9      	ble.n	8000d50 <main+0xb8>
	}

	ret += COG_off();
 8000d7c:	f7ff fee2 	bl	8000b44 <COG_off>
 8000d80:	0003      	movs	r3, r0
 8000d82:	b2d9      	uxtb	r1, r3
 8000d84:	2213      	movs	r2, #19
 8000d86:	18bb      	adds	r3, r7, r2
 8000d88:	18ba      	adds	r2, r7, r2
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	188a      	adds	r2, r1, r2
 8000d8e:	701a      	strb	r2, [r3, #0]
	printf("Ret from COG off\r\n");
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <main+0x12c>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 fe0e 	bl	80039b4 <puts>
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b007      	add	sp, #28
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	080049f8 	.word	0x080049f8
 8000da8:	080067c4 	.word	0x080067c4
 8000dac:	50000400 	.word	0x50000400
 8000db0:	0800495c 	.word	0x0800495c
 8000db4:	08004970 	.word	0x08004970
 8000db8:	080067da 	.word	0x080067da
 8000dbc:	08004984 	.word	0x08004984
 8000dc0:	080049f0 	.word	0x080049f0
 8000dc4:	080049b0 	.word	0x080049b0

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b099      	sub	sp, #100	; 0x64
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	242c      	movs	r4, #44	; 0x2c
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2334      	movs	r3, #52	; 0x34
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f002 fd57 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dde:	2318      	movs	r3, #24
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	0018      	movs	r0, r3
 8000de4:	2314      	movs	r3, #20
 8000de6:	001a      	movs	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f002 fd4f 	bl	800388c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	2318      	movs	r3, #24
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f002 fd48 	bl	800388c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <SystemClock_Config+0xd4>)
 8000e02:	401a      	ands	r2, r3
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <SystemClock_Config+0xd0>)
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0109      	lsls	r1, r1, #4
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e0e:	0021      	movs	r1, r4
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2210      	movs	r2, #16
 8000e14:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2201      	movs	r2, #1
 8000e1a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	22a0      	movs	r2, #160	; 0xa0
 8000e26:	0212      	lsls	r2, r2, #8
 8000e28:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fe12 	bl	8001a5c <HAL_RCC_OscConfig>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e3c:	f000 f950 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	2118      	movs	r1, #24
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	220f      	movs	r2, #15
 8000e46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2100      	movs	r1, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 f975 	bl	8002154 <HAL_RCC_ClockConfig>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e6e:	f000 f937 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2202      	movs	r2, #2
 8000e76:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7e:	003b      	movs	r3, r7
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fb8b 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e8a:	f000 f929 	bl	80010e0 <Error_Handler>
  }
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b019      	add	sp, #100	; 0x64
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40007000 	.word	0x40007000
 8000e9c:	ffffe7ff 	.word	0xffffe7ff

08000ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <MX_SPI1_Init+0x6c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000eac:	2282      	movs	r2, #130	; 0x82
 8000eae:	0052      	lsls	r2, r2, #1
 8000eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 fc7e 	bl	80027f4 <HAL_SPI_Init>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000efc:	f000 f8f0 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20003b3c 	.word	0x20003b3c
 8000f0c:	40013000 	.word	0x40013000

08000f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f16:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <MX_USART2_UART_Init+0x5c>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f1c:	22e1      	movs	r2, #225	; 0xe1
 8000f1e:	0252      	lsls	r2, r2, #9
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <MX_USART2_UART_Init+0x58>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 ff07 	bl	8002d68 <HAL_UART_Init>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f5e:	f000 f8bf 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20003b94 	.word	0x20003b94
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b08b      	sub	sp, #44	; 0x2c
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	2414      	movs	r4, #20
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	2314      	movs	r3, #20
 8000f7e:	001a      	movs	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f002 fc83 	bl	800388c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8a:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	2204      	movs	r2, #4
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <MX_GPIO_Init+0x164>)
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_PWR_GPIO_Port, EPD_PWR_Pin, GPIO_PIN_RESET);
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_GPIO_Init+0x168>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2104      	movs	r1, #4
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fd18 	bl	8001a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DC_Pin|EPD_RST_Pin, GPIO_PIN_SET);
 8000ff2:	23a0      	movs	r3, #160	; 0xa0
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2112      	movs	r1, #18
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 fd11 	bl	8001a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001000:	23a0      	movs	r3, #160	; 0xa0
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	2200      	movs	r2, #0
 8001006:	2120      	movs	r1, #32
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fd0a 	bl	8001a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <MX_GPIO_Init+0x16c>)
 8001010:	2201      	movs	r2, #1
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	0018      	movs	r0, r3
 8001016:	f000 fd04 	bl	8001a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	0192      	lsls	r2, r2, #6
 8001020:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2284      	movs	r2, #132	; 0x84
 8001026:	0392      	lsls	r2, r2, #14
 8001028:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001030:	193b      	adds	r3, r7, r4
 8001032:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <MX_GPIO_Init+0x168>)
 8001034:	0019      	movs	r1, r3
 8001036:	0010      	movs	r0, r2
 8001038:	f000 fb58 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_PWR_Pin */
  GPIO_InitStruct.Pin = EPD_PWR_Pin;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2204      	movs	r2, #4
 8001040:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2201      	movs	r2, #1
 8001046:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001054:	193b      	adds	r3, r7, r4
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <MX_GPIO_Init+0x168>)
 8001058:	0019      	movs	r1, r3
 800105a:	0010      	movs	r0, r2
 800105c:	f000 fb46 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8001060:	193b      	adds	r3, r7, r4
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	193b      	adds	r3, r7, r4
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	193b      	adds	r3, r7, r4
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001072:	193a      	adds	r2, r7, r4
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fb36 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DC_Pin EPD_RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_RST_Pin|LD2_Pin;
 8001080:	193b      	adds	r3, r7, r4
 8001082:	2232      	movs	r2, #50	; 0x32
 8001084:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	193b      	adds	r3, r7, r4
 8001088:	2201      	movs	r2, #1
 800108a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	193b      	adds	r3, r7, r4
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	193a      	adds	r2, r7, r4
 800109a:	23a0      	movs	r3, #160	; 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 fb23 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80010a6:	0021      	movs	r1, r4
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2201      	movs	r2, #1
 80010b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <MX_GPIO_Init+0x16c>)
 80010c4:	0019      	movs	r1, r3
 80010c6:	0010      	movs	r0, r2
 80010c8:	f000 fb10 	bl	80016ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b00b      	add	sp, #44	; 0x2c
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	50000800 	.word	0x50000800
 80010dc:	50000400 	.word	0x50000400

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_MspInit+0x24>)
 80010f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x24>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	430a      	orrs	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HAL_MspInit+0x24>)
 80010fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_MspInit+0x24>)
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0549      	lsls	r1, r1, #21
 8001106:	430a      	orrs	r2, r1
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b08b      	sub	sp, #44	; 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	2414      	movs	r4, #20
 800111e:	193b      	adds	r3, r7, r4
 8001120:	0018      	movs	r0, r3
 8001122:	2314      	movs	r3, #20
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f002 fbb0 	bl	800388c <memset>
  if(hspi->Instance==SPI1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <HAL_SPI_MspInit+0xc0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d14a      	bne.n	80011cc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 8001138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	0149      	lsls	r1, r1, #5
 8001140:	430a      	orrs	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 8001146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 8001162:	2102      	movs	r1, #2
 8001164:	430a      	orrs	r2, r1
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_SPI_MspInit+0xc4>)
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	2202      	movs	r2, #2
 800116e:	4013      	ands	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001174:	193b      	adds	r3, r7, r4
 8001176:	22c0      	movs	r2, #192	; 0xc0
 8001178:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	193b      	adds	r3, r7, r4
 800117c:	2202      	movs	r2, #2
 800117e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	193b      	adds	r3, r7, r4
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	2203      	movs	r2, #3
 800118a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800118c:	193b      	adds	r3, r7, r4
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	193a      	adds	r2, r7, r4
 8001194:	23a0      	movs	r3, #160	; 0xa0
 8001196:	05db      	lsls	r3, r3, #23
 8001198:	0011      	movs	r1, r2
 800119a:	0018      	movs	r0, r3
 800119c:	f000 faa6 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a0:	0021      	movs	r1, r4
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2208      	movs	r2, #8
 80011a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2202      	movs	r2, #2
 80011ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2203      	movs	r2, #3
 80011b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_SPI_MspInit+0xc8>)
 80011c4:	0019      	movs	r1, r3
 80011c6:	0010      	movs	r0, r2
 80011c8:	f000 fa90 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b00b      	add	sp, #44	; 0x2c
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	50000400 	.word	0x50000400

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	240c      	movs	r4, #12
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	0018      	movs	r0, r3
 80011ee:	2314      	movs	r3, #20
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f002 fb4a 	bl	800388c <memset>
  if(huart->Instance==USART2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <HAL_UART_MspInit+0x80>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d129      	bne.n	8001256 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x84>)
 8001204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x84>)
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	0289      	lsls	r1, r1, #10
 800120c:	430a      	orrs	r2, r1
 800120e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_MspInit+0x84>)
 8001212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_UART_MspInit+0x84>)
 8001216:	2101      	movs	r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x84>)
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001228:	0021      	movs	r1, r4
 800122a:	187b      	adds	r3, r7, r1
 800122c:	220c      	movs	r2, #12
 800122e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2202      	movs	r2, #2
 8001234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2203      	movs	r2, #3
 8001240:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2204      	movs	r2, #4
 8001246:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	187a      	adds	r2, r7, r1
 800124a:	23a0      	movs	r3, #160	; 0xa0
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f000 fa4b 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b009      	add	sp, #36	; 0x24
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40004400 	.word	0x40004400
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f000 f93a 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e00a      	b.n	80012be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a8:	e000      	b.n	80012ac <_read+0x16>
 80012aa:	bf00      	nop
 80012ac:	0001      	movs	r1, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	60ba      	str	r2, [r7, #8]
 80012b4:	b2ca      	uxtb	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf0      	blt.n	80012a8 <_read+0x12>
  }

  return len;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b006      	add	sp, #24
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e009      	b.n	80012f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff fb66 	bl	80009bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf1      	blt.n	80012e2 <_write+0x12>
  }
  return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b006      	add	sp, #24
 8001306:	bd80      	pop	{r7, pc}

08001308 <_close>:

int _close(int file)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}

0800131c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0192      	lsls	r2, r2, #6
 800132c:	605a      	str	r2, [r3, #4]
  return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <_isatty>:

int _isatty(int file)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}

0800134a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b004      	add	sp, #16
 800135e:	bd80      	pop	{r7, pc}

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f002 fa52 	bl	8003838 <__errno>
 8001394:	0003      	movs	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	2301      	movs	r3, #1
 800139c:	425b      	negs	r3, r3
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	18d2      	adds	r2, r2, r3
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b006      	add	sp, #24
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20005000 	.word	0x20005000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20003c1c 	.word	0x20003c1c
 80013c8:	20003c38 	.word	0x20003c38

080013cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013da:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013dc:	f7ff fff6 	bl	80013cc <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <LoopForever+0x6>)
    LDR R1, [R0]
 80013e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80013e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <LoopForever+0xa>)
    CMP R1, R2
 80013e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80013ea:	d105      	bne.n	80013f8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80013ee:	4912      	ldr	r1, [pc, #72]	; (8001438 <LoopForever+0x12>)
    STR R1, [R0]
 80013f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80013f4:	4912      	ldr	r1, [pc, #72]	; (8001440 <LoopForever+0x1a>)
    STR R1, [R0]
 80013f6:	6001      	str	r1, [r0, #0]

080013f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <LoopForever+0x1e>)
  ldr r1, =_edata
 80013fa:	4913      	ldr	r1, [pc, #76]	; (8001448 <LoopForever+0x22>)
  ldr r2, =_sidata
 80013fc:	4a13      	ldr	r2, [pc, #76]	; (800144c <LoopForever+0x26>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001410:	4c10      	ldr	r4, [pc, #64]	; (8001454 <LoopForever+0x2e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f002 fa11 	bl	8003844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff fc39 	bl	8000c98 <main>

08001426 <LoopForever>:

LoopForever:
    b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
   ldr   r0, =_estack
 8001428:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 800142c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001430:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001434:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001438:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800143c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001440:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800144c:	080068f0 	.word	0x080068f0
  ldr r2, =_sbss
 8001450:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001454:	20003c34 	.word	0x20003c34

08001458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_IRQHandler>
	...

0800145c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x3c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_Init+0x3c>)
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f811 	bl	800149c <HAL_InitTick>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d003      	beq.n	8001486 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e001      	b.n	800148a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001486:	f7ff fe31 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40022000 	.word	0x40022000

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_InitTick+0x5c>)
 80014a6:	681c      	ldr	r4, [r3, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_InitTick+0x60>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	0019      	movs	r1, r3
 80014ae:	23fa      	movs	r3, #250	; 0xfa
 80014b0:	0098      	lsls	r0, r3, #2
 80014b2:	f7fe fe33 	bl	800011c <__udivsi3>
 80014b6:	0003      	movs	r3, r0
 80014b8:	0019      	movs	r1, r3
 80014ba:	0020      	movs	r0, r4
 80014bc:	f7fe fe2e 	bl	800011c <__udivsi3>
 80014c0:	0003      	movs	r3, r0
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f905 	bl	80016d2 <HAL_SYSTICK_Config>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00f      	b.n	80014f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d80b      	bhi.n	80014ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	2301      	movs	r3, #1
 80014da:	425b      	negs	r3, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f8e2 	bl	80016a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_InitTick+0x64>)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b003      	add	sp, #12
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	20000018 	.word	0x20000018
 80014fc:	20000020 	.word	0x20000020
 8001500:	2000001c 	.word	0x2000001c

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	001a      	movs	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	18d2      	adds	r2, r2, r3
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000020 	.word	0x20000020
 8001524:	20003c20 	.word	0x20003c20

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	20003c20 	.word	0x20003c20

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fff0 	bl	8001528 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	001a      	movs	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	189b      	adds	r3, r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	f7ff ffe0 	bl	8001528 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	20000020 	.word	0x20000020

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	0002      	movs	r2, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b7f      	cmp	r3, #127	; 0x7f
 8001598:	d828      	bhi.n	80015ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <__NVIC_SetPriority+0xd4>)
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	33c0      	adds	r3, #192	; 0xc0
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	589b      	ldr	r3, [r3, r2]
 80015aa:	1dfa      	adds	r2, r7, #7
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	0011      	movs	r1, r2
 80015b0:	2203      	movs	r2, #3
 80015b2:	400a      	ands	r2, r1
 80015b4:	00d2      	lsls	r2, r2, #3
 80015b6:	21ff      	movs	r1, #255	; 0xff
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	43d2      	mvns	r2, r2
 80015be:	401a      	ands	r2, r3
 80015c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	22ff      	movs	r2, #255	; 0xff
 80015c8:	401a      	ands	r2, r3
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	0018      	movs	r0, r3
 80015d0:	2303      	movs	r3, #3
 80015d2:	4003      	ands	r3, r0
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <__NVIC_SetPriority+0xd4>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	430a      	orrs	r2, r1
 80015e4:	33c0      	adds	r3, #192	; 0xc0
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015ea:	e031      	b.n	8001650 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <__NVIC_SetPriority+0xd8>)
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0019      	movs	r1, r3
 80015f4:	230f      	movs	r3, #15
 80015f6:	400b      	ands	r3, r1
 80015f8:	3b08      	subs	r3, #8
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3306      	adds	r3, #6
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	3304      	adds	r3, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	1dfa      	adds	r2, r7, #7
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	0011      	movs	r1, r2
 800160c:	2203      	movs	r2, #3
 800160e:	400a      	ands	r2, r1
 8001610:	00d2      	lsls	r2, r2, #3
 8001612:	21ff      	movs	r1, #255	; 0xff
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	43d2      	mvns	r2, r2
 800161a:	401a      	ands	r2, r3
 800161c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	401a      	ands	r2, r3
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	2303      	movs	r3, #3
 800162e:	4003      	ands	r3, r0
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <__NVIC_SetPriority+0xd8>)
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	001c      	movs	r4, r3
 800163c:	230f      	movs	r3, #15
 800163e:	4023      	ands	r3, r4
 8001640:	3b08      	subs	r3, #8
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	430a      	orrs	r2, r1
 8001646:	3306      	adds	r3, #6
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	18c3      	adds	r3, r0, r3
 800164c:	3304      	adds	r3, #4
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b003      	add	sp, #12
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1e5a      	subs	r2, r3, #1
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	045b      	lsls	r3, r3, #17
 8001670:	429a      	cmp	r2, r3
 8001672:	d301      	bcc.n	8001678 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001674:	2301      	movs	r3, #1
 8001676:	e010      	b.n	800169a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <SysTick_Config+0x44>)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	3a01      	subs	r2, #1
 800167e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001680:	2301      	movs	r3, #1
 8001682:	425b      	negs	r3, r3
 8001684:	2103      	movs	r1, #3
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ff7c 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x44>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x44>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	210f      	movs	r1, #15
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	1c02      	adds	r2, r0, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	0011      	movs	r1, r2
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b004      	add	sp, #16
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ffbf 	bl	8001660 <SysTick_Config>
 80016e2:	0003      	movs	r3, r0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001702:	e155      	b.n	80019b0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <HAL_GPIO_Init+0x30>
 800171a:	e146      	b.n	80019aa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	2b01      	cmp	r3, #1
 8001726:	d005      	beq.n	8001734 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	2201      	movs	r2, #1
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2203      	movs	r2, #3
 800179c:	4013      	ands	r3, r2
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d017      	beq.n	80017d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d123      	bne.n	8001826 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	58d3      	ldr	r3, [r2, r3]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4013      	ands	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2107      	movs	r1, #7
 800180a:	400b      	ands	r3, r1
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	401a      	ands	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	23c0      	movs	r3, #192	; 0xc0
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d100      	bne.n	8001868 <HAL_GPIO_Init+0x17c>
 8001866:	e0a0      	b.n	80019aa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_GPIO_Init+0x2dc>)
 800186a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186c:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <HAL_GPIO_Init+0x2dc>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001874:	4a55      	ldr	r2, [pc, #340]	; (80019cc <HAL_GPIO_Init+0x2e0>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	589b      	ldr	r3, [r3, r2]
 8001880:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2203      	movs	r2, #3
 8001886:	4013      	ands	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	409a      	lsls	r2, r3
 800188e:	0013      	movs	r3, r2
 8001890:	43da      	mvns	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	23a0      	movs	r3, #160	; 0xa0
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	429a      	cmp	r2, r3
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x1f6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x2e4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x1f2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2e8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x1ee>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2ec>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x1ea>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a47      	ldr	r2, [pc, #284]	; (80019dc <HAL_GPIO_Init+0x2f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x1e6>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a46      	ldr	r2, [pc, #280]	; (80019e0 <HAL_GPIO_Init+0x2f4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x1e2>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e00a      	b.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018e2:	2300      	movs	r3, #0
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	2103      	movs	r1, #3
 80018e8:	400a      	ands	r2, r1
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x2e0>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	035b      	lsls	r3, r3, #13
 800191a:	4013      	ands	r3, r2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	039b      	lsls	r3, r3, #14
 8001944:	4013      	ands	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43da      	mvns	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	025b      	lsls	r3, r3, #9
 8001998:	4013      	ands	r3, r2
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_GPIO_Init+0x2f8>)
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	40da      	lsrs	r2, r3
 80019b8:	1e13      	subs	r3, r2, #0
 80019ba:	d000      	beq.n	80019be <HAL_GPIO_Init+0x2d2>
 80019bc:	e6a2      	b.n	8001704 <HAL_GPIO_Init+0x18>
  }
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b006      	add	sp, #24
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	50000400 	.word	0x50000400
 80019d4:	50000800 	.word	0x50000800
 80019d8:	50000c00 	.word	0x50000c00
 80019dc:	50001000 	.word	0x50001000
 80019e0:	50001c00 	.word	0x50001c00
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	000a      	movs	r2, r1
 80019f2:	1cbb      	adds	r3, r7, #2
 80019f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	1cba      	adds	r2, r7, #2
 80019fc:	8812      	ldrh	r2, [r2, #0]
 80019fe:	4013      	ands	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a02:	230f      	movs	r3, #15
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e003      	b.n	8001a14 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a14:	230f      	movs	r3, #15
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	0008      	movs	r0, r1
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	1cbb      	adds	r3, r7, #2
 8001a30:	1c02      	adds	r2, r0, #0
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	1c7b      	adds	r3, r7, #1
 8001a36:	1c0a      	adds	r2, r1, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3a:	1c7b      	adds	r3, r7, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	1cbb      	adds	r3, r7, #2
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a4a:	e003      	b.n	8001a54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f000 fb6c 	bl	8002148 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a70:	4bc8      	ldr	r3, [pc, #800]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	220c      	movs	r2, #12
 8001a76:	4013      	ands	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7a:	4bc6      	ldr	r3, [pc, #792]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x36>
 8001a90:	e07d      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d112      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x68>
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	4bba      	ldr	r3, [pc, #744]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5a>
 8001ab4:	e06a      	b.n	8001b8c <HAL_RCC_OscConfig+0x130>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d166      	bne.n	8001b8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f000 fb42 	bl	8002148 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x84>
 8001ad0:	4bb0      	ldr	r3, [pc, #704]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4baf      	ldr	r3, [pc, #700]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0249      	lsls	r1, r1, #9
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e027      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	23a0      	movs	r3, #160	; 0xa0
 8001ae6:	02db      	lsls	r3, r3, #11
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d10e      	bne.n	8001b0a <HAL_RCC_OscConfig+0xae>
 8001aec:	4ba9      	ldr	r3, [pc, #676]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4ba8      	ldr	r3, [pc, #672]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	02c9      	lsls	r1, r1, #11
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	4ba6      	ldr	r3, [pc, #664]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4ba5      	ldr	r3, [pc, #660]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0249      	lsls	r1, r1, #9
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e012      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001b0a:	4ba2      	ldr	r3, [pc, #648]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4ba1      	ldr	r3, [pc, #644]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b10:	49a1      	ldr	r1, [pc, #644]	; (8001d98 <HAL_RCC_OscConfig+0x33c>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	4b9f      	ldr	r3, [pc, #636]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	025b      	lsls	r3, r3, #9
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4b9b      	ldr	r3, [pc, #620]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b9a      	ldr	r3, [pc, #616]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	499c      	ldr	r1, [pc, #624]	; (8001d9c <HAL_RCC_OscConfig+0x340>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fcf6 	bl	8001528 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b42:	f7ff fcf1 	bl	8001528 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e2f9      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0xe6>
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fce1 	bl	8001528 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcdc 	bl	8001528 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e2e4      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b7e:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x110>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d100      	bne.n	8001b9a <HAL_RCC_OscConfig+0x13e>
 8001b98:	e099      	b.n	8001cce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ba8:	4b7a      	ldr	r3, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001bae:	2120      	movs	r1, #32
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	4393      	bics	r3, r2
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d13e      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1ea>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d13b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_RCC_OscConfig+0x186>
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e2b2      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b6c      	ldr	r3, [pc, #432]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x344>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	021a      	lsls	r2, r3, #8
 8001bf2:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2209      	movs	r2, #9
 8001bfe:	4393      	bics	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 fbeb 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8001c0e:	0001      	movs	r1, r0
 8001c10:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	220f      	movs	r2, #15
 8001c18:	4013      	ands	r3, r2
 8001c1a:	4a62      	ldr	r2, [pc, #392]	; (8001da4 <HAL_RCC_OscConfig+0x348>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	000a      	movs	r2, r1
 8001c20:	40da      	lsrs	r2, r3
 8001c22:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <HAL_RCC_OscConfig+0x34c>)
 8001c24:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCC_OscConfig+0x350>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2513      	movs	r5, #19
 8001c2c:	197c      	adds	r4, r7, r5
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fc34 	bl	800149c <HAL_InitTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c38:	197b      	adds	r3, r7, r5
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d046      	beq.n	8001cce <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c40:	197b      	adds	r3, r7, r5
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	e280      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d027      	beq.n	8001c9c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c4c:	4b51      	ldr	r3, [pc, #324]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2209      	movs	r2, #9
 8001c52:	4393      	bics	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fc63 	bl	8001528 <HAL_GetTick>
 8001c62:	0003      	movs	r3, r0
 8001c64:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc5e 	bl	8001528 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e266      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c7a:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4013      	ands	r3, r2
 8001c82:	d0f1      	beq.n	8001c68 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <HAL_RCC_OscConfig+0x344>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	021a      	lsls	r2, r3, #8
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	e018      	b.n	8001cce <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc3e 	bl	8001528 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fc39 	bl	8001528 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e241      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f1      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCC_OscConfig+0x27e>
 8001cd8:	e0a1      	b.n	8001e1e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d140      	bne.n	8001d62 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x29c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e227      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <HAL_RCC_OscConfig+0x354>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	0a19      	lsrs	r1, r3, #8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	061a      	lsls	r2, r3, #24
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	0b5b      	lsrs	r3, r3, #13
 8001d26:	3301      	adds	r3, #1
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	0212      	lsls	r2, r2, #8
 8001d2c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	210f      	movs	r1, #15
 8001d36:	400b      	ands	r3, r1
 8001d38:	491a      	ldr	r1, [pc, #104]	; (8001da4 <HAL_RCC_OscConfig+0x348>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x34c>)
 8001d40:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x350>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2513      	movs	r5, #19
 8001d48:	197c      	adds	r4, r7, r5
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff fba6 	bl	800149c <HAL_InitTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d54:	197b      	adds	r3, r7, r5
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d060      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001d5c:	197b      	adds	r3, r7, r5
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	e1f2      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03f      	beq.n	8001dea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_OscConfig+0x338>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0049      	lsls	r1, r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fbd6 	bl	8001528 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d82:	f7ff fbd1 	bl	8001528 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d911      	bls.n	8001db4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1d9      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
 8001d94:	40021000 	.word	0x40021000
 8001d98:	fffeffff 	.word	0xfffeffff
 8001d9c:	fffbffff 	.word	0xfffbffff
 8001da0:	ffffe0ff 	.word	0xffffe0ff
 8001da4:	080067dc 	.word	0x080067dc
 8001da8:	20000018 	.word	0x20000018
 8001dac:	2000001c 	.word	0x2000001c
 8001db0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001db4:	4bc9      	ldr	r3, [pc, #804]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0e0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc0:	4bc6      	ldr	r3, [pc, #792]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4ac6      	ldr	r2, [pc, #792]	; (80020e0 <HAL_RCC_OscConfig+0x684>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	4bc3      	ldr	r3, [pc, #780]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd4:	4bc1      	ldr	r3, [pc, #772]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	0a19      	lsrs	r1, r3, #8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	061a      	lsls	r2, r3, #24
 8001de2:	4bbe      	ldr	r3, [pc, #760]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	e019      	b.n	8001e1e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dea:	4bbc      	ldr	r3, [pc, #752]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4bbb      	ldr	r3, [pc, #748]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001df0:	49bc      	ldr	r1, [pc, #752]	; (80020e4 <HAL_RCC_OscConfig+0x688>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff fb97 	bl	8001528 <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e00:	f7ff fb92 	bl	8001528 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e19a      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e12:	4bb2      	ldr	r3, [pc, #712]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	4013      	ands	r3, r2
 8001e26:	d036      	beq.n	8001e96 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d019      	beq.n	8001e64 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e30:	4baa      	ldr	r3, [pc, #680]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	4ba9      	ldr	r3, [pc, #676]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fb74 	bl	8001528 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fb6f 	bl	8001528 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e177      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e58:	4ba0      	ldr	r3, [pc, #640]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f1      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3ea>
 8001e62:	e018      	b.n	8001e96 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e64:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e68:	4b9c      	ldr	r3, [pc, #624]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fb5a 	bl	8001528 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fb55 	bl	8001528 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e15d      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e8c:	4b93      	ldr	r3, [pc, #588]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f1      	bne.n	8001e7a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x446>
 8001ea0:	e0ae      	b.n	8002000 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2023      	movs	r0, #35	; 0x23
 8001ea4:	183b      	adds	r3, r7, r0
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	055b      	lsls	r3, r3, #21
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0549      	lsls	r1, r1, #21
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ec4:	183b      	adds	r3, r7, r0
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b87      	ldr	r3, [pc, #540]	; (80020e8 <HAL_RCC_OscConfig+0x68c>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed6:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_RCC_OscConfig+0x68c>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b83      	ldr	r3, [pc, #524]	; (80020e8 <HAL_RCC_OscConfig+0x68c>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0049      	lsls	r1, r1, #1
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fb20 	bl	8001528 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7ff fb1b 	bl	8001528 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	; 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e123      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <HAL_RCC_OscConfig+0x68c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4cc>
 8001f18:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0049      	lsls	r1, r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50
 8001f26:	e031      	b.n	8001f8c <HAL_RCC_OscConfig+0x530>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4ee>
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f36:	496b      	ldr	r1, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x688>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f3c:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f42:	496a      	ldr	r1, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x690>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50
 8001f48:	e020      	b.n	8001f8c <HAL_RCC_OscConfig+0x530>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	23a0      	movs	r3, #160	; 0xa0
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d10e      	bne.n	8001f74 <HAL_RCC_OscConfig+0x518>
 8001f56:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5a:	4b60      	ldr	r3, [pc, #384]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	00c9      	lsls	r1, r1, #3
 8001f60:	430a      	orrs	r2, r1
 8001f62:	651a      	str	r2, [r3, #80]	; 0x50
 8001f64:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f68:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0049      	lsls	r1, r1, #1
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	651a      	str	r2, [r3, #80]	; 0x50
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x530>
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f78:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f7a:	495a      	ldr	r1, [pc, #360]	; (80020e4 <HAL_RCC_OscConfig+0x688>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f84:	4b55      	ldr	r3, [pc, #340]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001f86:	4959      	ldr	r1, [pc, #356]	; (80020ec <HAL_RCC_OscConfig+0x690>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fac8 	bl	8001528 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fac3 	bl	8001528 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <HAL_RCC_OscConfig+0x694>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0ca      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCC_OscConfig+0x542>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fab2 	bl	8001528 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff faad 	bl	8001528 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_RCC_OscConfig+0x694>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0b4      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fea:	2323      	movs	r3, #35	; 0x23
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8001ffa:	493e      	ldr	r1, [pc, #248]	; (80020f4 <HAL_RCC_OscConfig+0x698>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	d100      	bne.n	800200a <HAL_RCC_OscConfig+0x5ae>
 8002008:	e09d      	b.n	8002146 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d100      	bne.n	8002012 <HAL_RCC_OscConfig+0x5b6>
 8002010:	e076      	b.n	8002100 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b02      	cmp	r3, #2
 8002018:	d145      	bne.n	80020a6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8002020:	4935      	ldr	r1, [pc, #212]	; (80020f8 <HAL_RCC_OscConfig+0x69c>)
 8002022:	400a      	ands	r2, r1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7ff fa7f 	bl	8001528 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff fa7a 	bl	8001528 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e082      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	049b      	lsls	r3, r3, #18
 800204a:	4013      	ands	r3, r2
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <HAL_RCC_OscConfig+0x6a0>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	431a      	orrs	r2, r3
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 800206a:	430a      	orrs	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0449      	lsls	r1, r1, #17
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fa54 	bl	8001528 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fa4f 	bl	8001528 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e057      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	049b      	lsls	r3, r3, #18
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x62a>
 80020a4:	e04f      	b.n	8002146 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 80020ac:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCC_OscConfig+0x69c>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa39 	bl	8001528 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020bc:	f7ff fa34 	bl	8001528 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e03c      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ce:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_OscConfig+0x680>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	049b      	lsls	r3, r3, #18
 80020d6:	4013      	ands	r3, r2
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x660>
 80020da:	e034      	b.n	8002146 <HAL_RCC_OscConfig+0x6ea>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	ffff1fff 	.word	0xffff1fff
 80020e4:	fffffeff 	.word	0xfffffeff
 80020e8:	40007000 	.word	0x40007000
 80020ec:	fffffbff 	.word	0xfffffbff
 80020f0:	00001388 	.word	0x00001388
 80020f4:	efffffff 	.word	0xefffffff
 80020f8:	feffffff 	.word	0xfeffffff
 80020fc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x6f4>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	429a      	cmp	r2, r3
 8002120:	d10f      	bne.n	8002142 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	23f0      	movs	r3, #240	; 0xf0
 8002126:	039b      	lsls	r3, r3, #14
 8002128:	401a      	ands	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	23c0      	movs	r3, #192	; 0xc0
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	401a      	ands	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b00a      	add	sp, #40	; 0x28
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e128      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b96      	ldr	r3, [pc, #600]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d91e      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b93      	ldr	r3, [pc, #588]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4393      	bics	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	4b90      	ldr	r3, [pc, #576]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002188:	f7ff f9ce 	bl	8001528 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7ff f9c9 	bl	8001528 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a8a      	ldr	r2, [pc, #552]	; (80023c8 <HAL_RCC_ClockConfig+0x274>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e109      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b87      	ldr	r3, [pc, #540]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021be:	4b83      	ldr	r3, [pc, #524]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	22f0      	movs	r2, #240	; 0xf0
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b7f      	ldr	r3, [pc, #508]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d100      	bne.n	80021de <HAL_RCC_ClockConfig+0x8a>
 80021dc:	e089      	b.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e6:	4b79      	ldr	r3, [pc, #484]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	029b      	lsls	r3, r3, #10
 80021ee:	4013      	ands	r3, r2
 80021f0:	d120      	bne.n	8002234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0e1      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021fe:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	049b      	lsls	r3, r3, #18
 8002206:	4013      	ands	r3, r2
 8002208:	d114      	bne.n	8002234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0d5      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d106      	bne.n	8002224 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002216:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2204      	movs	r2, #4
 800221c:	4013      	ands	r3, r2
 800221e:	d109      	bne.n	8002234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0ca      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002224:	4b69      	ldr	r3, [pc, #420]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0c2      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2203      	movs	r2, #3
 800223a:	4393      	bics	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002248:	f7ff f96e 	bl	8001528 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d111      	bne.n	800227c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002258:	e009      	b.n	800226e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7ff f965 	bl	8001528 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x274>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0a5      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800226e:	4b57      	ldr	r3, [pc, #348]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	220c      	movs	r2, #12
 8002274:	4013      	ands	r3, r2
 8002276:	2b08      	cmp	r3, #8
 8002278:	d1ef      	bne.n	800225a <HAL_RCC_ClockConfig+0x106>
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	e009      	b.n	800229a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002286:	f7ff f94f 	bl	8001528 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x274>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e08f      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229a:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	220c      	movs	r2, #12
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d1ef      	bne.n	8002286 <HAL_RCC_ClockConfig+0x132>
 80022a6:	e024      	b.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11b      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b0:	e009      	b.n	80022c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b2:	f7ff f939 	bl	8001528 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_RCC_ClockConfig+0x274>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e079      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	220c      	movs	r2, #12
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d1ef      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x15e>
 80022d2:	e00e      	b.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d4:	f7ff f928 	bl	8001528 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <HAL_RCC_ClockConfig+0x274>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e068      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022e8:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	220c      	movs	r2, #12
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d21e      	bcs.n	800233e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2201      	movs	r2, #1
 8002306:	4393      	bics	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002312:	f7ff f909 	bl	8001528 <HAL_GetTick>
 8002316:	0003      	movs	r3, r0
 8002318:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	e009      	b.n	8002330 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7ff f904 	bl	8001528 <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_RCC_ClockConfig+0x274>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e044      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_ClockConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d1ee      	bne.n	800231c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	4013      	ands	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x27c>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2208      	movs	r2, #8
 8002362:	4013      	ands	r3, r2
 8002364:	d00a      	beq.n	800237c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_RCC_ClockConfig+0x280>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	00da      	lsls	r2, r3, #3
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237c:	f000 f832 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8002380:	0001      	movs	r1, r0
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x278>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	220f      	movs	r2, #15
 800238a:	4013      	ands	r3, r2
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x284>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	000a      	movs	r2, r1
 8002392:	40da      	lsrs	r2, r3
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_ClockConfig+0x288>)
 8002396:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_ClockConfig+0x28c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	250b      	movs	r5, #11
 800239e:	197c      	adds	r4, r7, r5
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff f87b 	bl	800149c <HAL_InitTick>
 80023a6:	0003      	movs	r3, r0
 80023a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023b2:	197b      	adds	r3, r7, r5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	e000      	b.n	80023ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	40022000 	.word	0x40022000
 80023c8:	00001388 	.word	0x00001388
 80023cc:	40021000 	.word	0x40021000
 80023d0:	fffff8ff 	.word	0xfffff8ff
 80023d4:	ffffc7ff 	.word	0xffffc7ff
 80023d8:	080067dc 	.word	0x080067dc
 80023dc:	20000018 	.word	0x20000018
 80023e0:	2000001c 	.word	0x2000001c

080023e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_GetSysClockFreq+0x138>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f2:	230c      	movs	r3, #12
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d014      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x40>
 80023fa:	d900      	bls.n	80023fe <HAL_RCC_GetSysClockFreq+0x1a>
 80023fc:	e07b      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x112>
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x24>
 8002402:	2b08      	cmp	r3, #8
 8002404:	d00b      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x3a>
 8002406:	e076      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002408:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_RCC_GetSysClockFreq+0x138>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	4013      	ands	r3, r2
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002416:	e07c      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HAL_RCC_GetSysClockFreq+0x140>)
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800241c:	e079      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCC_GetSysClockFreq+0x144>)
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002422:	e076      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	0c9a      	lsrs	r2, r3, #18
 8002428:	230f      	movs	r3, #15
 800242a:	401a      	ands	r2, r3
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_GetSysClockFreq+0x148>)
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	0d9a      	lsrs	r2, r3, #22
 8002436:	2303      	movs	r3, #3
 8002438:	4013      	ands	r3, r2
 800243a:	3301      	adds	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_GetSysClockFreq+0x138>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	025b      	lsls	r3, r3, #9
 8002446:	4013      	ands	r3, r2
 8002448:	d01a      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	4a35      	ldr	r2, [pc, #212]	; (8002528 <HAL_RCC_GetSysClockFreq+0x144>)
 8002454:	2300      	movs	r3, #0
 8002456:	69b8      	ldr	r0, [r7, #24]
 8002458:	69f9      	ldr	r1, [r7, #28]
 800245a:	f7fd fff5 	bl	8000448 <__aeabi_lmul>
 800245e:	0002      	movs	r2, r0
 8002460:	000b      	movs	r3, r1
 8002462:	0010      	movs	r0, r2
 8002464:	0019      	movs	r1, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f7fd ffc9 	bl	8000408 <__aeabi_uldivmod>
 8002476:	0002      	movs	r2, r0
 8002478:	000b      	movs	r3, r1
 800247a:	0013      	movs	r3, r2
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
 800247e:	e037      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCC_GetSysClockFreq+0x138>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2210      	movs	r2, #16
 8002486:	4013      	ands	r3, r2
 8002488:	d01a      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4a23      	ldr	r2, [pc, #140]	; (8002520 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002494:	2300      	movs	r3, #0
 8002496:	68b8      	ldr	r0, [r7, #8]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	f7fd ffd5 	bl	8000448 <__aeabi_lmul>
 800249e:	0002      	movs	r2, r0
 80024a0:	000b      	movs	r3, r1
 80024a2:	0010      	movs	r0, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f7fd ffa9 	bl	8000408 <__aeabi_uldivmod>
 80024b6:	0002      	movs	r2, r0
 80024b8:	000b      	movs	r3, r1
 80024ba:	0013      	movs	r3, r2
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
 80024be:	e017      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	0018      	movs	r0, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	0019      	movs	r1, r3
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ca:	2300      	movs	r3, #0
 80024cc:	f7fd ffbc 	bl	8000448 <__aeabi_lmul>
 80024d0:	0002      	movs	r2, r0
 80024d2:	000b      	movs	r3, r1
 80024d4:	0010      	movs	r0, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	001c      	movs	r4, r3
 80024dc:	2300      	movs	r3, #0
 80024de:	001d      	movs	r5, r3
 80024e0:	0022      	movs	r2, r4
 80024e2:	002b      	movs	r3, r5
 80024e4:	f7fd ff90 	bl	8000408 <__aeabi_uldivmod>
 80024e8:	0002      	movs	r2, r0
 80024ea:	000b      	movs	r3, r1
 80024ec:	0013      	movs	r3, r2
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024f4:	e00d      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_GetSysClockFreq+0x138>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	2207      	movs	r2, #7
 80024fe:	4013      	ands	r3, r2
 8002500:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	3301      	adds	r3, #1
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0212      	lsls	r2, r2, #8
 800250a:	409a      	lsls	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002510:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b00e      	add	sp, #56	; 0x38
 800251a:	bdb0      	pop	{r4, r5, r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	003d0900 	.word	0x003d0900
 8002524:	00f42400 	.word	0x00f42400
 8002528:	007a1200 	.word	0x007a1200
 800252c:	080067f4 	.word	0x080067f4

08002530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_RCC_GetHCLKFreq+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	20000018 	.word	0x20000018

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002548:	f7ff fff2 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800254c:	0001      	movs	r1, r0
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	2207      	movs	r2, #7
 8002556:	4013      	ands	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_RCC_GetPCLK1Freq+0x28>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	40d9      	lsrs	r1, r3
 800255e:	000b      	movs	r3, r1
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	40021000 	.word	0x40021000
 800256c:	080067ec 	.word	0x080067ec

08002570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002574:	f7ff ffdc 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002578:	0001      	movs	r1, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	0adb      	lsrs	r3, r3, #11
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	40d9      	lsrs	r1, r3
 800258a:	000b      	movs	r3, r1
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	080067ec 	.word	0x080067ec

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025a4:	2017      	movs	r0, #23
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	4013      	ands	r3, r2
 80025b4:	d100      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80025b6:	e0c7      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	d109      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c8:	4b80      	ldr	r3, [pc, #512]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	0549      	lsls	r1, r1, #21
 80025ce:	430a      	orrs	r2, r1
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025d2:	183b      	adds	r3, r7, r0
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b7d      	ldr	r3, [pc, #500]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d11a      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e4:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0049      	lsls	r1, r1, #1
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe ff99 	bl	8001528 <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	e008      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7fe ff94 	bl	8001528 <HAL_GetTick>
 8002600:	0002      	movs	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0d9      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d0f0      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800261a:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	23c0      	movs	r3, #192	; 0xc0
 8002620:	039b      	lsls	r3, r3, #14
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	23c0      	movs	r3, #192	; 0xc0
 800262c:	039b      	lsls	r3, r3, #14
 800262e:	4013      	ands	r3, r2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d013      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	23c0      	movs	r3, #192	; 0xc0
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	401a      	ands	r2, r3
 8002640:	23c0      	movs	r3, #192	; 0xc0
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	429a      	cmp	r2, r3
 8002646:	d10a      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002648:	4b60      	ldr	r3, [pc, #384]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	401a      	ands	r2, r3
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	029b      	lsls	r3, r3, #10
 8002656:	429a      	cmp	r2, r3
 8002658:	d101      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0b1      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d03b      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	4013      	ands	r3, r2
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d033      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2220      	movs	r2, #32
 8002686:	4013      	ands	r3, r2
 8002688:	d02e      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800268c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268e:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002694:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0309      	lsls	r1, r1, #12
 800269e:	430a      	orrs	r2, r1
 80026a0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a8:	494b      	ldr	r1, [pc, #300]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d014      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe ff33 	bl	8001528 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c6:	e009      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe ff2e 	bl	8001528 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	4a42      	ldr	r2, [pc, #264]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e072      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0ef      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2220      	movs	r2, #32
 80026ee:	4013      	ands	r3, r2
 80026f0:	d01f      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	401a      	ands	r2, r3
 80026fc:	23c0      	movs	r3, #192	; 0xc0
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	429a      	cmp	r2, r3
 8002702:	d10c      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	23c0      	movs	r3, #192	; 0xc0
 8002714:	039b      	lsls	r3, r3, #14
 8002716:	401a      	ands	r2, r3
 8002718:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002720:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	23c0      	movs	r3, #192	; 0xc0
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	401a      	ands	r2, r3
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800272e:	430a      	orrs	r2, r1
 8002730:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002732:	2317      	movs	r3, #23
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800273e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002742:	4928      	ldr	r1, [pc, #160]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002744:	400a      	ands	r2, r1
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2202      	movs	r2, #2
 800274e:	4013      	ands	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	220c      	movs	r2, #12
 8002758:	4393      	bics	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002762:	430a      	orrs	r2, r1
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2204      	movs	r2, #4
 800276c:	4013      	ands	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002780:	430a      	orrs	r2, r1
 8002782:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2208      	movs	r2, #8
 800278a:	4013      	ands	r3, r2
 800278c:	d009      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002794:	4013      	ands	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	4013      	ands	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b0:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b006      	add	sp, #24
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	fffcffff 	.word	0xfffcffff
 80027d8:	fff7ffff 	.word	0xfff7ffff
 80027dc:	00001388 	.word	0x00001388
 80027e0:	ffcfffff 	.word	0xffcfffff
 80027e4:	efffffff 	.word	0xefffffff
 80027e8:	fffff3ff 	.word	0xfffff3ff
 80027ec:	ffffcfff 	.word	0xffffcfff
 80027f0:	fff3ffff 	.word	0xfff3ffff

080027f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e07b      	b.n	80028fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	2382      	movs	r3, #130	; 0x82
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	429a      	cmp	r2, r3
 8002818:	d009      	beq.n	800282e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
 8002820:	e005      	b.n	800282e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2251      	movs	r2, #81	; 0x51
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2250      	movs	r2, #80	; 0x50
 8002844:	2100      	movs	r1, #0
 8002846:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f7fe fc62 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2251      	movs	r2, #81	; 0x51
 8002854:	2102      	movs	r1, #2
 8002856:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	438a      	bics	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	2382      	movs	r3, #130	; 0x82
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	401a      	ands	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	2384      	movs	r3, #132	; 0x84
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	400b      	ands	r3, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	400b      	ands	r3, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2102      	movs	r1, #2
 8002890:	400b      	ands	r3, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	2101      	movs	r1, #1
 800289a:	400b      	ands	r3, r1
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6999      	ldr	r1, [r3, #24]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	400b      	ands	r3, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2138      	movs	r1, #56	; 0x38
 80028b0:	400b      	ands	r3, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	400b      	ands	r3, r1
 80028bc:	431a      	orrs	r2, r3
 80028be:	0011      	movs	r1, r2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	401a      	ands	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	2204      	movs	r2, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2210      	movs	r2, #16
 80028e4:	401a      	ands	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2251      	movs	r2, #81	; 0x51
 80028f8:	2101      	movs	r1, #1
 80028fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b088      	sub	sp, #32
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002916:	231f      	movs	r3, #31
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2250      	movs	r2, #80	; 0x50
 8002922:	5c9b      	ldrb	r3, [r3, r2]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_SPI_Transmit+0x26>
 8002928:	2302      	movs	r3, #2
 800292a:	e145      	b.n	8002bb8 <HAL_SPI_Transmit+0x2b2>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2250      	movs	r2, #80	; 0x50
 8002930:	2101      	movs	r1, #1
 8002932:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002934:	f7fe fdf8 	bl	8001528 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800293c:	2316      	movs	r3, #22
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	1dba      	adds	r2, r7, #6
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2251      	movs	r2, #81	; 0x51
 800294a:	5c9b      	ldrb	r3, [r3, r2]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d004      	beq.n	800295c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002952:	231f      	movs	r3, #31
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]
    goto error;
 800295a:	e126      	b.n	8002baa <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_SPI_Transmit+0x64>
 8002962:	1dbb      	adds	r3, r7, #6
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800296a:	231f      	movs	r3, #31
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
    goto error;
 8002972:	e11a      	b.n	8002baa <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2251      	movs	r2, #81	; 0x51
 8002978:	2103      	movs	r1, #3
 800297a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1dba      	adds	r2, r7, #6
 800298c:	8812      	ldrh	r2, [r2, #0]
 800298e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1dba      	adds	r2, r7, #6
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	429a      	cmp	r2, r3
 80029c0:	d110      	bne.n	80029e4 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2140      	movs	r1, #64	; 0x40
 80029ce:	438a      	bics	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	01c9      	lsls	r1, r1, #7
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d007      	beq.n	8002a02 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d152      	bne.n	8002ab4 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_SPI_Transmit+0x11a>
 8002a16:	2316      	movs	r3, #22
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d143      	bne.n	8002aa8 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a44:	e030      	b.n	8002aa8 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d112      	bne.n	8002a7a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a78:	e016      	b.n	8002aa8 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7a:	f7fe fd55 	bl	8001528 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d802      	bhi.n	8002a90 <HAL_SPI_Transmit+0x18a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_SPI_Transmit+0x190>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002a96:	231f      	movs	r3, #31
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2251      	movs	r2, #81	; 0x51
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
          goto error;
 8002aa6:	e080      	b.n	8002baa <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1c9      	bne.n	8002a46 <HAL_SPI_Transmit+0x140>
 8002ab2:	e053      	b.n	8002b5c <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <HAL_SPI_Transmit+0x1c0>
 8002abc:	2316      	movs	r3, #22
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d145      	bne.n	8002b52 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aec:	e031      	b.n	8002b52 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d113      	bne.n	8002b24 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b22:	e016      	b.n	8002b52 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b24:	f7fe fd00 	bl	8001528 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d802      	bhi.n	8002b3a <HAL_SPI_Transmit+0x234>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	d102      	bne.n	8002b40 <HAL_SPI_Transmit+0x23a>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d108      	bne.n	8002b52 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8002b40:	231f      	movs	r3, #31
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2203      	movs	r2, #3
 8002b46:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2251      	movs	r2, #81	; 0x51
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b50:	e02b      	b.n	8002baa <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1c8      	bne.n	8002aee <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f8ba 	bl	8002cdc <SPI_EndRxTxTransaction>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002b98:	231f      	movs	r3, #31
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e003      	b.n	8002baa <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2251      	movs	r2, #81	; 0x51
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2250      	movs	r2, #80	; 0x50
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bb2:	231f      	movs	r3, #31
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b008      	add	sp, #32
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bd0:	f7fe fcaa 	bl	8001528 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	18d3      	adds	r3, r2, r3
 8002bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002be0:	f7fe fca2 	bl	8001528 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002be8:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	015b      	lsls	r3, r3, #5
 8002bee:	0d1b      	lsrs	r3, r3, #20
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	4353      	muls	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bf6:	e058      	b.n	8002caa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	d055      	beq.n	8002caa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bfe:	f7fe fc93 	bl	8001528 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d902      	bls.n	8002c14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d142      	bne.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	21e0      	movs	r1, #224	; 0xe0
 8002c20:	438a      	bics	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	2382      	movs	r3, #130	; 0x82
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d113      	bne.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d005      	beq.n	8002c48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2140      	movs	r1, #64	; 0x40
 8002c54:	438a      	bics	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	019b      	lsls	r3, r3, #6
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d110      	bne.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	491a      	ldr	r1, [pc, #104]	; (8002cd8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0189      	lsls	r1, r1, #6
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2251      	movs	r2, #81	; 0x51
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2250      	movs	r2, #80	; 0x50
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e017      	b.n	8002cca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	425a      	negs	r2, r3
 8002cba:	4153      	adcs	r3, r2
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d197      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b008      	add	sp, #32
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000018 	.word	0x20000018
 8002cd8:	ffffdfff 	.word	0xffffdfff

08002cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <SPI_EndRxTxTransaction+0x84>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	491d      	ldr	r1, [pc, #116]	; (8002d64 <SPI_EndRxTxTransaction+0x88>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7fd fa14 	bl	800011c <__udivsi3>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	015b      	lsls	r3, r3, #5
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	2382      	movs	r3, #130	; 0x82
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d112      	bne.n	8002d38 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	0013      	movs	r3, r2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	f7ff ff4e 	bl	8002bc0 <SPI_WaitFlagStateUntilTimeout>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d016      	beq.n	8002d56 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e00f      	b.n	8002d58 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d0f2      	beq.n	8002d38 <SPI_EndRxTxTransaction+0x5c>
 8002d52:	e000      	b.n	8002d56 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002d54:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b006      	add	sp, #24
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000018 	.word	0x20000018
 8002d64:	016e3600 	.word	0x016e3600

08002d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e044      	b.n	8002e04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2278      	movs	r2, #120	; 0x78
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7fe fa27 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2224      	movs	r2, #36	; 0x24
 8002d96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2101      	movs	r1, #1
 8002da4:	438a      	bics	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f8d0 	bl	8002f50 <UART_SetConfig>
 8002db0:	0003      	movs	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e024      	b.n	8002e04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 fb0d 	bl	80033e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	490d      	ldr	r1, [pc, #52]	; (8002e0c <HAL_UART_Init+0xa4>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	212a      	movs	r1, #42	; 0x2a
 8002de6:	438a      	bics	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 fba5 	bl	800354c <UART_CheckIdleState>
 8002e02:	0003      	movs	r3, r0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	ffffb7ff 	.word	0xffffb7ff

08002e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	; 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	1dbb      	adds	r3, r7, #6
 8002e1e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d000      	beq.n	8002e2a <HAL_UART_Transmit+0x1a>
 8002e28:	e08c      	b.n	8002f44 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_UART_Transmit+0x28>
 8002e30:	1dbb      	adds	r3, r7, #6
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e084      	b.n	8002f46 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	015b      	lsls	r3, r3, #5
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d109      	bne.n	8002e5c <HAL_UART_Transmit+0x4c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d001      	beq.n	8002e5c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e074      	b.n	8002f46 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2284      	movs	r2, #132	; 0x84
 8002e60:	2100      	movs	r1, #0
 8002e62:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2221      	movs	r2, #33	; 0x21
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fb5d 	bl	8001528 <HAL_GetTick>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1dba      	adds	r2, r7, #6
 8002e76:	2150      	movs	r1, #80	; 0x50
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1dba      	adds	r2, r7, #6
 8002e80:	2152      	movs	r1, #82	; 0x52
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d108      	bne.n	8002ea4 <HAL_UART_Transmit+0x94>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eac:	e02f      	b.n	8002f0e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	f000 fbee 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e03b      	b.n	8002f46 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	05d2      	lsls	r2, r2, #23
 8002ee0:	0dd2      	lsrs	r2, r2, #23
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e007      	b.n	8002efc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2252      	movs	r2, #82	; 0x52
 8002f00:	5a9b      	ldrh	r3, [r3, r2]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b299      	uxth	r1, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2252      	movs	r2, #82	; 0x52
 8002f0c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2252      	movs	r2, #82	; 0x52
 8002f12:	5a9b      	ldrh	r3, [r3, r2]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1c9      	bne.n	8002eae <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	0013      	movs	r3, r2
 8002f24:	2200      	movs	r2, #0
 8002f26:	2140      	movs	r1, #64	; 0x40
 8002f28:	f000 fbb8 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e005      	b.n	8002f46 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b008      	add	sp, #32
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b08e      	sub	sp, #56	; 0x38
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f58:	231a      	movs	r3, #26
 8002f5a:	2218      	movs	r2, #24
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	19db      	adds	r3, r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4ab4      	ldr	r2, [pc, #720]	; (8003254 <UART_SetConfig+0x304>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4aaf      	ldr	r2, [pc, #700]	; (8003258 <UART_SetConfig+0x308>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4aa9      	ldr	r2, [pc, #676]	; (800325c <UART_SetConfig+0x30c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	4aa5      	ldr	r2, [pc, #660]	; (8003260 <UART_SetConfig+0x310>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4aa1      	ldr	r2, [pc, #644]	; (8003264 <UART_SetConfig+0x314>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d131      	bne.n	8003048 <UART_SetConfig+0xf8>
 8002fe4:	4ba0      	ldr	r3, [pc, #640]	; (8003268 <UART_SetConfig+0x318>)
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	220c      	movs	r2, #12
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d01d      	beq.n	800302c <UART_SetConfig+0xdc>
 8002ff0:	d823      	bhi.n	800303a <UART_SetConfig+0xea>
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d00c      	beq.n	8003010 <UART_SetConfig+0xc0>
 8002ff6:	d820      	bhi.n	800303a <UART_SetConfig+0xea>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <UART_SetConfig+0xb2>
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d00e      	beq.n	800301e <UART_SetConfig+0xce>
 8003000:	e01b      	b.n	800303a <UART_SetConfig+0xea>
 8003002:	231b      	movs	r3, #27
 8003004:	2218      	movs	r2, #24
 8003006:	189b      	adds	r3, r3, r2
 8003008:	19db      	adds	r3, r3, r7
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e065      	b.n	80030dc <UART_SetConfig+0x18c>
 8003010:	231b      	movs	r3, #27
 8003012:	2218      	movs	r2, #24
 8003014:	189b      	adds	r3, r3, r2
 8003016:	19db      	adds	r3, r3, r7
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e05e      	b.n	80030dc <UART_SetConfig+0x18c>
 800301e:	231b      	movs	r3, #27
 8003020:	2218      	movs	r2, #24
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	2204      	movs	r2, #4
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e057      	b.n	80030dc <UART_SetConfig+0x18c>
 800302c:	231b      	movs	r3, #27
 800302e:	2218      	movs	r2, #24
 8003030:	189b      	adds	r3, r3, r2
 8003032:	19db      	adds	r3, r3, r7
 8003034:	2208      	movs	r2, #8
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e050      	b.n	80030dc <UART_SetConfig+0x18c>
 800303a:	231b      	movs	r3, #27
 800303c:	2218      	movs	r2, #24
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2210      	movs	r2, #16
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e049      	b.n	80030dc <UART_SetConfig+0x18c>
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a83      	ldr	r2, [pc, #524]	; (800325c <UART_SetConfig+0x30c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d13e      	bne.n	80030d0 <UART_SetConfig+0x180>
 8003052:	4b85      	ldr	r3, [pc, #532]	; (8003268 <UART_SetConfig+0x318>)
 8003054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	4013      	ands	r3, r2
 800305c:	22c0      	movs	r2, #192	; 0xc0
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	4293      	cmp	r3, r2
 8003062:	d027      	beq.n	80030b4 <UART_SetConfig+0x164>
 8003064:	22c0      	movs	r2, #192	; 0xc0
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	4293      	cmp	r3, r2
 800306a:	d82a      	bhi.n	80030c2 <UART_SetConfig+0x172>
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	4293      	cmp	r3, r2
 8003072:	d011      	beq.n	8003098 <UART_SetConfig+0x148>
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	4293      	cmp	r3, r2
 800307a:	d822      	bhi.n	80030c2 <UART_SetConfig+0x172>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <UART_SetConfig+0x13a>
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	00d2      	lsls	r2, r2, #3
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <UART_SetConfig+0x156>
 8003088:	e01b      	b.n	80030c2 <UART_SetConfig+0x172>
 800308a:	231b      	movs	r3, #27
 800308c:	2218      	movs	r2, #24
 800308e:	189b      	adds	r3, r3, r2
 8003090:	19db      	adds	r3, r3, r7
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e021      	b.n	80030dc <UART_SetConfig+0x18c>
 8003098:	231b      	movs	r3, #27
 800309a:	2218      	movs	r2, #24
 800309c:	189b      	adds	r3, r3, r2
 800309e:	19db      	adds	r3, r3, r7
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e01a      	b.n	80030dc <UART_SetConfig+0x18c>
 80030a6:	231b      	movs	r3, #27
 80030a8:	2218      	movs	r2, #24
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	2204      	movs	r2, #4
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e013      	b.n	80030dc <UART_SetConfig+0x18c>
 80030b4:	231b      	movs	r3, #27
 80030b6:	2218      	movs	r2, #24
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	19db      	adds	r3, r3, r7
 80030bc:	2208      	movs	r2, #8
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e00c      	b.n	80030dc <UART_SetConfig+0x18c>
 80030c2:	231b      	movs	r3, #27
 80030c4:	2218      	movs	r2, #24
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	19db      	adds	r3, r3, r7
 80030ca:	2210      	movs	r2, #16
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e005      	b.n	80030dc <UART_SetConfig+0x18c>
 80030d0:	231b      	movs	r3, #27
 80030d2:	2218      	movs	r2, #24
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	19db      	adds	r3, r3, r7
 80030d8:	2210      	movs	r2, #16
 80030da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5e      	ldr	r2, [pc, #376]	; (800325c <UART_SetConfig+0x30c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d000      	beq.n	80030e8 <UART_SetConfig+0x198>
 80030e6:	e084      	b.n	80031f2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e8:	231b      	movs	r3, #27
 80030ea:	2218      	movs	r2, #24
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d01d      	beq.n	8003132 <UART_SetConfig+0x1e2>
 80030f6:	dc20      	bgt.n	800313a <UART_SetConfig+0x1ea>
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d015      	beq.n	8003128 <UART_SetConfig+0x1d8>
 80030fc:	dc1d      	bgt.n	800313a <UART_SetConfig+0x1ea>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <UART_SetConfig+0x1b8>
 8003102:	2b02      	cmp	r3, #2
 8003104:	d005      	beq.n	8003112 <UART_SetConfig+0x1c2>
 8003106:	e018      	b.n	800313a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7ff fa1c 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800310c:	0003      	movs	r3, r0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003110:	e01c      	b.n	800314c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003112:	4b55      	ldr	r3, [pc, #340]	; (8003268 <UART_SetConfig+0x318>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2210      	movs	r2, #16
 8003118:	4013      	ands	r3, r2
 800311a:	d002      	beq.n	8003122 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <UART_SetConfig+0x31c>)
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003120:	e014      	b.n	800314c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003122:	4b53      	ldr	r3, [pc, #332]	; (8003270 <UART_SetConfig+0x320>)
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003126:	e011      	b.n	800314c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003128:	f7ff f95c 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800312c:	0003      	movs	r3, r0
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003130:	e00c      	b.n	800314c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003138:	e008      	b.n	800314c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800313e:	231a      	movs	r3, #26
 8003140:	2218      	movs	r2, #24
 8003142:	189b      	adds	r3, r3, r2
 8003144:	19db      	adds	r3, r3, r7
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
        break;
 800314a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d100      	bne.n	8003154 <UART_SetConfig+0x204>
 8003152:	e12f      	b.n	80033b4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	0013      	movs	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	189b      	adds	r3, r3, r2
 800315e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d305      	bcc.n	8003170 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800316a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316c:	429a      	cmp	r2, r3
 800316e:	d906      	bls.n	800317e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003170:	231a      	movs	r3, #26
 8003172:	2218      	movs	r2, #24
 8003174:	189b      	adds	r3, r3, r2
 8003176:	19db      	adds	r3, r3, r7
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e11a      	b.n	80033b4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	6939      	ldr	r1, [r7, #16]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	000b      	movs	r3, r1
 800318c:	0e1b      	lsrs	r3, r3, #24
 800318e:	0010      	movs	r0, r2
 8003190:	0205      	lsls	r5, r0, #8
 8003192:	431d      	orrs	r5, r3
 8003194:	000b      	movs	r3, r1
 8003196:	021c      	lsls	r4, r3, #8
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68b8      	ldr	r0, [r7, #8]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	1900      	adds	r0, r0, r4
 80031aa:	4169      	adcs	r1, r5
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f7fd f925 	bl	8000408 <__aeabi_uldivmod>
 80031be:	0002      	movs	r2, r0
 80031c0:	000b      	movs	r3, r1
 80031c2:	0013      	movs	r3, r2
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c8:	23c0      	movs	r3, #192	; 0xc0
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d309      	bcc.n	80031e4 <UART_SetConfig+0x294>
 80031d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	035b      	lsls	r3, r3, #13
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d204      	bcs.n	80031e4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	e0e7      	b.n	80033b4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80031e4:	231a      	movs	r3, #26
 80031e6:	2218      	movs	r2, #24
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	19db      	adds	r3, r3, r7
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e0e0      	b.n	80033b4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d000      	beq.n	8003200 <UART_SetConfig+0x2b0>
 80031fe:	e082      	b.n	8003306 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003200:	231b      	movs	r3, #27
 8003202:	2218      	movs	r2, #24
 8003204:	189b      	adds	r3, r3, r2
 8003206:	19db      	adds	r3, r3, r7
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b08      	cmp	r3, #8
 800320c:	d834      	bhi.n	8003278 <UART_SetConfig+0x328>
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <UART_SetConfig+0x324>)
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7ff f994 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800321c:	0003      	movs	r3, r0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003220:	e033      	b.n	800328a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003222:	f7ff f9a5 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8003226:	0003      	movs	r3, r0
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800322a:	e02e      	b.n	800328a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <UART_SetConfig+0x318>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2210      	movs	r2, #16
 8003232:	4013      	ands	r3, r2
 8003234:	d002      	beq.n	800323c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <UART_SetConfig+0x31c>)
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800323a:	e026      	b.n	800328a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <UART_SetConfig+0x320>)
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003240:	e023      	b.n	800328a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7ff f8cf 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8003246:	0003      	movs	r3, r0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800324a:	e01e      	b.n	800328a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003252:	e01a      	b.n	800328a <UART_SetConfig+0x33a>
 8003254:	efff69f3 	.word	0xefff69f3
 8003258:	ffffcfff 	.word	0xffffcfff
 800325c:	40004800 	.word	0x40004800
 8003260:	fffff4ff 	.word	0xfffff4ff
 8003264:	40004400 	.word	0x40004400
 8003268:	40021000 	.word	0x40021000
 800326c:	003d0900 	.word	0x003d0900
 8003270:	00f42400 	.word	0x00f42400
 8003274:	08006800 	.word	0x08006800
      default:
        pclk = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800327c:	231a      	movs	r3, #26
 800327e:	2218      	movs	r2, #24
 8003280:	189b      	adds	r3, r3, r2
 8003282:	19db      	adds	r3, r3, r7
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
        break;
 8003288:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d100      	bne.n	8003292 <UART_SetConfig+0x342>
 8003290:	e090      	b.n	80033b4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	18d2      	adds	r2, r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	0019      	movs	r1, r3
 80032a4:	0010      	movs	r0, r2
 80032a6:	f7fc ff39 	bl	800011c <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d921      	bls.n	80032f8 <UART_SetConfig+0x3a8>
 80032b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d21c      	bcs.n	80032f8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	200e      	movs	r0, #14
 80032c4:	2418      	movs	r4, #24
 80032c6:	1903      	adds	r3, r0, r4
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	210f      	movs	r1, #15
 80032cc:	438a      	bics	r2, r1
 80032ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2207      	movs	r2, #7
 80032d8:	4013      	ands	r3, r2
 80032da:	b299      	uxth	r1, r3
 80032dc:	1903      	adds	r3, r0, r4
 80032de:	19db      	adds	r3, r3, r7
 80032e0:	1902      	adds	r2, r0, r4
 80032e2:	19d2      	adds	r2, r2, r7
 80032e4:	8812      	ldrh	r2, [r2, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1902      	adds	r2, r0, r4
 80032f0:	19d2      	adds	r2, r2, r7
 80032f2:	8812      	ldrh	r2, [r2, #0]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e05d      	b.n	80033b4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80032f8:	231a      	movs	r3, #26
 80032fa:	2218      	movs	r2, #24
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e056      	b.n	80033b4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003306:	231b      	movs	r3, #27
 8003308:	2218      	movs	r2, #24
 800330a:	189b      	adds	r3, r3, r2
 800330c:	19db      	adds	r3, r3, r7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d822      	bhi.n	800335a <UART_SetConfig+0x40a>
 8003314:	009a      	lsls	r2, r3, #2
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <UART_SetConfig+0x484>)
 8003318:	18d3      	adds	r3, r2, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7ff f911 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8003322:	0003      	movs	r3, r0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003326:	e021      	b.n	800336c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003328:	f7ff f922 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 800332c:	0003      	movs	r3, r0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003330:	e01c      	b.n	800336c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <UART_SetConfig+0x488>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	4013      	ands	r3, r2
 800333a:	d002      	beq.n	8003342 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <UART_SetConfig+0x48c>)
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003340:	e014      	b.n	800336c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <UART_SetConfig+0x490>)
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003346:	e011      	b.n	800336c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003348:	f7ff f84c 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800334c:	0003      	movs	r3, r0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003350:	e00c      	b.n	800336c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003358:	e008      	b.n	800336c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800335e:	231a      	movs	r3, #26
 8003360:	2218      	movs	r2, #24
 8003362:	189b      	adds	r3, r3, r2
 8003364:	19db      	adds	r3, r3, r7
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
        break;
 800336a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d020      	beq.n	80033b4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	085a      	lsrs	r2, r3, #1
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	18d2      	adds	r2, r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0019      	movs	r1, r3
 8003382:	0010      	movs	r0, r2
 8003384:	f7fc feca 	bl	800011c <__udivsi3>
 8003388:	0003      	movs	r3, r0
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	2b0f      	cmp	r3, #15
 8003390:	d90a      	bls.n	80033a8 <UART_SetConfig+0x458>
 8003392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	025b      	lsls	r3, r3, #9
 8003398:	429a      	cmp	r2, r3
 800339a:	d205      	bcs.n	80033a8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	b29a      	uxth	r2, r3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e005      	b.n	80033b4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80033a8:	231a      	movs	r3, #26
 80033aa:	2218      	movs	r2, #24
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2200      	movs	r2, #0
 80033b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2200      	movs	r2, #0
 80033be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033c0:	231a      	movs	r3, #26
 80033c2:	2218      	movs	r2, #24
 80033c4:	189b      	adds	r3, r3, r2
 80033c6:	19db      	adds	r3, r3, r7
 80033c8:	781b      	ldrb	r3, [r3, #0]
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b00e      	add	sp, #56	; 0x38
 80033d0:	bdb0      	pop	{r4, r5, r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	08006824 	.word	0x08006824
 80033d8:	40021000 	.word	0x40021000
 80033dc:	003d0900 	.word	0x003d0900
 80033e0:	00f42400 	.word	0x00f42400

080033e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	d00b      	beq.n	800340e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	; (8003528 <UART_AdvFeatureConfig+0x144>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d00b      	beq.n	8003430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a43      	ldr	r2, [pc, #268]	; (800352c <UART_AdvFeatureConfig+0x148>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2204      	movs	r2, #4
 8003436:	4013      	ands	r3, r2
 8003438:	d00b      	beq.n	8003452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <UART_AdvFeatureConfig+0x14c>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2208      	movs	r2, #8
 8003458:	4013      	ands	r3, r2
 800345a:	d00b      	beq.n	8003474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a34      	ldr	r2, [pc, #208]	; (8003534 <UART_AdvFeatureConfig+0x150>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2210      	movs	r2, #16
 800347a:	4013      	ands	r3, r2
 800347c:	d00b      	beq.n	8003496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <UART_AdvFeatureConfig+0x154>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2220      	movs	r2, #32
 800349c:	4013      	ands	r3, r2
 800349e:	d00b      	beq.n	80034b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	4a25      	ldr	r2, [pc, #148]	; (800353c <UART_AdvFeatureConfig+0x158>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2240      	movs	r2, #64	; 0x40
 80034be:	4013      	ands	r3, r2
 80034c0:	d01d      	beq.n	80034fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <UART_AdvFeatureConfig+0x15c>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	035b      	lsls	r3, r3, #13
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d10b      	bne.n	80034fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <UART_AdvFeatureConfig+0x160>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	4013      	ands	r3, r2
 8003506:	d00b      	beq.n	8003520 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <UART_AdvFeatureConfig+0x164>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffdffff 	.word	0xfffdffff
 800352c:	fffeffff 	.word	0xfffeffff
 8003530:	fffbffff 	.word	0xfffbffff
 8003534:	ffff7fff 	.word	0xffff7fff
 8003538:	ffffefff 	.word	0xffffefff
 800353c:	ffffdfff 	.word	0xffffdfff
 8003540:	ffefffff 	.word	0xffefffff
 8003544:	ff9fffff 	.word	0xff9fffff
 8003548:	fff7ffff 	.word	0xfff7ffff

0800354c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b092      	sub	sp, #72	; 0x48
 8003550:	af02      	add	r7, sp, #8
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2284      	movs	r2, #132	; 0x84
 8003558:	2100      	movs	r1, #0
 800355a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800355c:	f7fd ffe4 	bl	8001528 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2208      	movs	r2, #8
 800356c:	4013      	ands	r3, r2
 800356e:	2b08      	cmp	r3, #8
 8003570:	d12c      	bne.n	80035cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	0391      	lsls	r1, r2, #14
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <UART_CheckIdleState+0x148>)
 800357c:	9200      	str	r2, [sp, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	f000 f88c 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003584:	1e03      	subs	r3, r0, #0
 8003586:	d021      	beq.n	80035cc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003588:	f3ef 8310 	mrs	r3, PRIMASK
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
 8003592:	2301      	movs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	438a      	bics	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2278      	movs	r2, #120	; 0x78
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e05f      	b.n	800368c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2204      	movs	r2, #4
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d146      	bne.n	8003668 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	03d1      	lsls	r1, r2, #15
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <UART_CheckIdleState+0x148>)
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f000 f858 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d03b      	beq.n	8003668 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8310 	mrs	r3, PRIMASK
 80035f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80035f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	2301      	movs	r3, #1
 80035fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4921      	ldr	r1, [pc, #132]	; (8003698 <UART_CheckIdleState+0x14c>)
 8003612:	400a      	ands	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	61bb      	str	r3, [r7, #24]
  return(result);
 8003628:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
 800362c:	2301      	movs	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	438a      	bics	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	2120      	movs	r1, #32
 800365a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2278      	movs	r2, #120	; 0x78
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e011      	b.n	800368c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	2120      	movs	r1, #32
 8003674:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2278      	movs	r2, #120	; 0x78
 8003686:	2100      	movs	r1, #0
 8003688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b010      	add	sp, #64	; 0x40
 8003692:	bd80      	pop	{r7, pc}
 8003694:	01ffffff 	.word	0x01ffffff
 8003698:	fffffedf 	.word	0xfffffedf

0800369c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	e04b      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d048      	beq.n	8003746 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fd ff38 	bl	8001528 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04b      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2204      	movs	r2, #4
 80036d6:	4013      	ands	r3, r2
 80036d8:	d035      	beq.n	8003746 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2208      	movs	r2, #8
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d111      	bne.n	800370c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f83c 	bl	8003770 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2284      	movs	r2, #132	; 0x84
 80036fc:	2108      	movs	r1, #8
 80036fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2278      	movs	r2, #120	; 0x78
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e02c      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	401a      	ands	r2, r3
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	429a      	cmp	r2, r3
 800371e:	d112      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f81f 	bl	8003770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2284      	movs	r2, #132	; 0x84
 8003736:	2120      	movs	r1, #32
 8003738:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2278      	movs	r2, #120	; 0x78
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00f      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	425a      	negs	r2, r3
 8003756:	4153      	adcs	r3, r2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	001a      	movs	r2, r3
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d0a4      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003778:	f3ef 8310 	mrs	r3, PRIMASK
 800377c:	617b      	str	r3, [r7, #20]
  return(result);
 800377e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4926      	ldr	r1, [pc, #152]	; (8003834 <UART_EndRxTransfer+0xc4>)
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037aa:	f3ef 8310 	mrs	r3, PRIMASK
 80037ae:	623b      	str	r3, [r7, #32]
  return(result);
 80037b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f383 8810 	msr	PRIMASK, r3
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d118      	bne.n	8003816 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ee:	2301      	movs	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2110      	movs	r1, #16
 8003806:	438a      	bics	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	2120      	movs	r1, #32
 800381c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	669a      	str	r2, [r3, #104]	; 0x68
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b00e      	add	sp, #56	; 0x38
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	fffffedf 	.word	0xfffffedf

08003838 <__errno>:
 8003838:	4b01      	ldr	r3, [pc, #4]	; (8003840 <__errno+0x8>)
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	4770      	bx	lr
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	20000024 	.word	0x20000024

08003844 <__libc_init_array>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	2600      	movs	r6, #0
 8003848:	4d0c      	ldr	r5, [pc, #48]	; (800387c <__libc_init_array+0x38>)
 800384a:	4c0d      	ldr	r4, [pc, #52]	; (8003880 <__libc_init_array+0x3c>)
 800384c:	1b64      	subs	r4, r4, r5
 800384e:	10a4      	asrs	r4, r4, #2
 8003850:	42a6      	cmp	r6, r4
 8003852:	d109      	bne.n	8003868 <__libc_init_array+0x24>
 8003854:	2600      	movs	r6, #0
 8003856:	f001 f875 	bl	8004944 <_init>
 800385a:	4d0a      	ldr	r5, [pc, #40]	; (8003884 <__libc_init_array+0x40>)
 800385c:	4c0a      	ldr	r4, [pc, #40]	; (8003888 <__libc_init_array+0x44>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	42a6      	cmp	r6, r4
 8003864:	d105      	bne.n	8003872 <__libc_init_array+0x2e>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	00b3      	lsls	r3, r6, #2
 800386a:	58eb      	ldr	r3, [r5, r3]
 800386c:	4798      	blx	r3
 800386e:	3601      	adds	r6, #1
 8003870:	e7ee      	b.n	8003850 <__libc_init_array+0xc>
 8003872:	00b3      	lsls	r3, r6, #2
 8003874:	58eb      	ldr	r3, [r5, r3]
 8003876:	4798      	blx	r3
 8003878:	3601      	adds	r6, #1
 800387a:	e7f2      	b.n	8003862 <__libc_init_array+0x1e>
 800387c:	080068e8 	.word	0x080068e8
 8003880:	080068e8 	.word	0x080068e8
 8003884:	080068e8 	.word	0x080068e8
 8003888:	080068ec 	.word	0x080068ec

0800388c <memset>:
 800388c:	0003      	movs	r3, r0
 800388e:	1882      	adds	r2, r0, r2
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	7019      	strb	r1, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <iprintf>:
 800389c:	b40f      	push	{r0, r1, r2, r3}
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <iprintf+0x30>)
 80038a0:	b513      	push	{r0, r1, r4, lr}
 80038a2:	681c      	ldr	r4, [r3, #0]
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d005      	beq.n	80038b4 <iprintf+0x18>
 80038a8:	69a3      	ldr	r3, [r4, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <iprintf+0x18>
 80038ae:	0020      	movs	r0, r4
 80038b0:	f000 fa86 	bl	8003dc0 <__sinit>
 80038b4:	ab05      	add	r3, sp, #20
 80038b6:	0020      	movs	r0, r4
 80038b8:	9a04      	ldr	r2, [sp, #16]
 80038ba:	68a1      	ldr	r1, [r4, #8]
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f000 fc99 	bl	80041f4 <_vfiprintf_r>
 80038c2:	bc16      	pop	{r1, r2, r4}
 80038c4:	bc08      	pop	{r3}
 80038c6:	b004      	add	sp, #16
 80038c8:	4718      	bx	r3
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	20000024 	.word	0x20000024

080038d0 <_puts_r>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	0005      	movs	r5, r0
 80038d4:	000e      	movs	r6, r1
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d004      	beq.n	80038e4 <_puts_r+0x14>
 80038da:	6983      	ldr	r3, [r0, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <_puts_r+0x14>
 80038e0:	f000 fa6e 	bl	8003dc0 <__sinit>
 80038e4:	69ab      	ldr	r3, [r5, #24]
 80038e6:	68ac      	ldr	r4, [r5, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <_puts_r+0x22>
 80038ec:	0028      	movs	r0, r5
 80038ee:	f000 fa67 	bl	8003dc0 <__sinit>
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <_puts_r+0xd8>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d122      	bne.n	800393e <_puts_r+0x6e>
 80038f8:	686c      	ldr	r4, [r5, #4]
 80038fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038fc:	07db      	lsls	r3, r3, #31
 80038fe:	d405      	bmi.n	800390c <_puts_r+0x3c>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	059b      	lsls	r3, r3, #22
 8003904:	d402      	bmi.n	800390c <_puts_r+0x3c>
 8003906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003908:	f000 fafb 	bl	8003f02 <__retarget_lock_acquire_recursive>
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	071b      	lsls	r3, r3, #28
 8003910:	d502      	bpl.n	8003918 <_puts_r+0x48>
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d129      	bne.n	800396c <_puts_r+0x9c>
 8003918:	0021      	movs	r1, r4
 800391a:	0028      	movs	r0, r5
 800391c:	f000 f8aa 	bl	8003a74 <__swsetup_r>
 8003920:	2800      	cmp	r0, #0
 8003922:	d023      	beq.n	800396c <_puts_r+0x9c>
 8003924:	2501      	movs	r5, #1
 8003926:	426d      	negs	r5, r5
 8003928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800392a:	07db      	lsls	r3, r3, #31
 800392c:	d405      	bmi.n	800393a <_puts_r+0x6a>
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	059b      	lsls	r3, r3, #22
 8003932:	d402      	bmi.n	800393a <_puts_r+0x6a>
 8003934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003936:	f000 fae5 	bl	8003f04 <__retarget_lock_release_recursive>
 800393a:	0028      	movs	r0, r5
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <_puts_r+0xdc>)
 8003940:	429c      	cmp	r4, r3
 8003942:	d101      	bne.n	8003948 <_puts_r+0x78>
 8003944:	68ac      	ldr	r4, [r5, #8]
 8003946:	e7d8      	b.n	80038fa <_puts_r+0x2a>
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <_puts_r+0xe0>)
 800394a:	429c      	cmp	r4, r3
 800394c:	d1d5      	bne.n	80038fa <_puts_r+0x2a>
 800394e:	68ec      	ldr	r4, [r5, #12]
 8003950:	e7d3      	b.n	80038fa <_puts_r+0x2a>
 8003952:	3601      	adds	r6, #1
 8003954:	60a3      	str	r3, [r4, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	da04      	bge.n	8003964 <_puts_r+0x94>
 800395a:	69a2      	ldr	r2, [r4, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	dc16      	bgt.n	800398e <_puts_r+0xbe>
 8003960:	290a      	cmp	r1, #10
 8003962:	d014      	beq.n	800398e <_puts_r+0xbe>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	6022      	str	r2, [r4, #0]
 800396a:	7019      	strb	r1, [r3, #0]
 800396c:	68a3      	ldr	r3, [r4, #8]
 800396e:	7831      	ldrb	r1, [r6, #0]
 8003970:	3b01      	subs	r3, #1
 8003972:	2900      	cmp	r1, #0
 8003974:	d1ed      	bne.n	8003952 <_puts_r+0x82>
 8003976:	60a3      	str	r3, [r4, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da0f      	bge.n	800399c <_puts_r+0xcc>
 800397c:	0028      	movs	r0, r5
 800397e:	0022      	movs	r2, r4
 8003980:	310a      	adds	r1, #10
 8003982:	f000 f821 	bl	80039c8 <__swbuf_r>
 8003986:	250a      	movs	r5, #10
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d1cd      	bne.n	8003928 <_puts_r+0x58>
 800398c:	e7ca      	b.n	8003924 <_puts_r+0x54>
 800398e:	0022      	movs	r2, r4
 8003990:	0028      	movs	r0, r5
 8003992:	f000 f819 	bl	80039c8 <__swbuf_r>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	d1e8      	bne.n	800396c <_puts_r+0x9c>
 800399a:	e7c3      	b.n	8003924 <_puts_r+0x54>
 800399c:	250a      	movs	r5, #10
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	6022      	str	r2, [r4, #0]
 80039a4:	701d      	strb	r5, [r3, #0]
 80039a6:	e7bf      	b.n	8003928 <_puts_r+0x58>
 80039a8:	0800686c 	.word	0x0800686c
 80039ac:	0800688c 	.word	0x0800688c
 80039b0:	0800684c 	.word	0x0800684c

080039b4 <puts>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <puts+0x10>)
 80039b8:	0001      	movs	r1, r0
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	f7ff ff88 	bl	80038d0 <_puts_r>
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000024 	.word	0x20000024

080039c8 <__swbuf_r>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	0005      	movs	r5, r0
 80039cc:	000e      	movs	r6, r1
 80039ce:	0014      	movs	r4, r2
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d004      	beq.n	80039de <__swbuf_r+0x16>
 80039d4:	6983      	ldr	r3, [r0, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <__swbuf_r+0x16>
 80039da:	f000 f9f1 	bl	8003dc0 <__sinit>
 80039de:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <__swbuf_r+0xa0>)
 80039e0:	429c      	cmp	r4, r3
 80039e2:	d12e      	bne.n	8003a42 <__swbuf_r+0x7a>
 80039e4:	686c      	ldr	r4, [r5, #4]
 80039e6:	69a3      	ldr	r3, [r4, #24]
 80039e8:	60a3      	str	r3, [r4, #8]
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	d532      	bpl.n	8003a56 <__swbuf_r+0x8e>
 80039f0:	6923      	ldr	r3, [r4, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02f      	beq.n	8003a56 <__swbuf_r+0x8e>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	6922      	ldr	r2, [r4, #16]
 80039fa:	b2f7      	uxtb	r7, r6
 80039fc:	1a98      	subs	r0, r3, r2
 80039fe:	6963      	ldr	r3, [r4, #20]
 8003a00:	b2f6      	uxtb	r6, r6
 8003a02:	4283      	cmp	r3, r0
 8003a04:	dc05      	bgt.n	8003a12 <__swbuf_r+0x4a>
 8003a06:	0021      	movs	r1, r4
 8003a08:	0028      	movs	r0, r5
 8003a0a:	f000 f937 	bl	8003c7c <_fflush_r>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d127      	bne.n	8003a62 <__swbuf_r+0x9a>
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	3001      	adds	r0, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	60a3      	str	r3, [r4, #8]
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	6022      	str	r2, [r4, #0]
 8003a20:	701f      	strb	r7, [r3, #0]
 8003a22:	6963      	ldr	r3, [r4, #20]
 8003a24:	4283      	cmp	r3, r0
 8003a26:	d004      	beq.n	8003a32 <__swbuf_r+0x6a>
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	07db      	lsls	r3, r3, #31
 8003a2c:	d507      	bpl.n	8003a3e <__swbuf_r+0x76>
 8003a2e:	2e0a      	cmp	r6, #10
 8003a30:	d105      	bne.n	8003a3e <__swbuf_r+0x76>
 8003a32:	0021      	movs	r1, r4
 8003a34:	0028      	movs	r0, r5
 8003a36:	f000 f921 	bl	8003c7c <_fflush_r>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d111      	bne.n	8003a62 <__swbuf_r+0x9a>
 8003a3e:	0030      	movs	r0, r6
 8003a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <__swbuf_r+0xa4>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	d101      	bne.n	8003a4c <__swbuf_r+0x84>
 8003a48:	68ac      	ldr	r4, [r5, #8]
 8003a4a:	e7cc      	b.n	80039e6 <__swbuf_r+0x1e>
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <__swbuf_r+0xa8>)
 8003a4e:	429c      	cmp	r4, r3
 8003a50:	d1c9      	bne.n	80039e6 <__swbuf_r+0x1e>
 8003a52:	68ec      	ldr	r4, [r5, #12]
 8003a54:	e7c7      	b.n	80039e6 <__swbuf_r+0x1e>
 8003a56:	0021      	movs	r1, r4
 8003a58:	0028      	movs	r0, r5
 8003a5a:	f000 f80b 	bl	8003a74 <__swsetup_r>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d0c9      	beq.n	80039f6 <__swbuf_r+0x2e>
 8003a62:	2601      	movs	r6, #1
 8003a64:	4276      	negs	r6, r6
 8003a66:	e7ea      	b.n	8003a3e <__swbuf_r+0x76>
 8003a68:	0800686c 	.word	0x0800686c
 8003a6c:	0800688c 	.word	0x0800688c
 8003a70:	0800684c 	.word	0x0800684c

08003a74 <__swsetup_r>:
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <__swsetup_r+0xe0>)
 8003a76:	b570      	push	{r4, r5, r6, lr}
 8003a78:	681d      	ldr	r5, [r3, #0]
 8003a7a:	0006      	movs	r6, r0
 8003a7c:	000c      	movs	r4, r1
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	d005      	beq.n	8003a8e <__swsetup_r+0x1a>
 8003a82:	69ab      	ldr	r3, [r5, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <__swsetup_r+0x1a>
 8003a88:	0028      	movs	r0, r5
 8003a8a:	f000 f999 	bl	8003dc0 <__sinit>
 8003a8e:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <__swsetup_r+0xe4>)
 8003a90:	429c      	cmp	r4, r3
 8003a92:	d10f      	bne.n	8003ab4 <__swsetup_r+0x40>
 8003a94:	686c      	ldr	r4, [r5, #4]
 8003a96:	230c      	movs	r3, #12
 8003a98:	5ee2      	ldrsh	r2, [r4, r3]
 8003a9a:	b293      	uxth	r3, r2
 8003a9c:	0711      	lsls	r1, r2, #28
 8003a9e:	d42d      	bmi.n	8003afc <__swsetup_r+0x88>
 8003aa0:	06d9      	lsls	r1, r3, #27
 8003aa2:	d411      	bmi.n	8003ac8 <__swsetup_r+0x54>
 8003aa4:	2309      	movs	r3, #9
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	6033      	str	r3, [r6, #0]
 8003aaa:	3337      	adds	r3, #55	; 0x37
 8003aac:	4313      	orrs	r3, r2
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	4240      	negs	r0, r0
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <__swsetup_r+0xe8>)
 8003ab6:	429c      	cmp	r4, r3
 8003ab8:	d101      	bne.n	8003abe <__swsetup_r+0x4a>
 8003aba:	68ac      	ldr	r4, [r5, #8]
 8003abc:	e7eb      	b.n	8003a96 <__swsetup_r+0x22>
 8003abe:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <__swsetup_r+0xec>)
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	d1e8      	bne.n	8003a96 <__swsetup_r+0x22>
 8003ac4:	68ec      	ldr	r4, [r5, #12]
 8003ac6:	e7e6      	b.n	8003a96 <__swsetup_r+0x22>
 8003ac8:	075b      	lsls	r3, r3, #29
 8003aca:	d513      	bpl.n	8003af4 <__swsetup_r+0x80>
 8003acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ace:	2900      	cmp	r1, #0
 8003ad0:	d008      	beq.n	8003ae4 <__swsetup_r+0x70>
 8003ad2:	0023      	movs	r3, r4
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	d002      	beq.n	8003ae0 <__swsetup_r+0x6c>
 8003ada:	0030      	movs	r0, r6
 8003adc:	f000 fa80 	bl	8003fe0 <_free_r>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8003ae4:	2224      	movs	r2, #36	; 0x24
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	4393      	bics	r3, r2
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	2300      	movs	r3, #0
 8003aee:	6063      	str	r3, [r4, #4]
 8003af0:	6923      	ldr	r3, [r4, #16]
 8003af2:	6023      	str	r3, [r4, #0]
 8003af4:	2308      	movs	r3, #8
 8003af6:	89a2      	ldrh	r2, [r4, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <__swsetup_r+0xa6>
 8003b02:	21a0      	movs	r1, #160	; 0xa0
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	0089      	lsls	r1, r1, #2
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	400b      	ands	r3, r1
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <__swsetup_r+0xa6>
 8003b12:	0021      	movs	r1, r4
 8003b14:	0030      	movs	r0, r6
 8003b16:	f000 fa1f 	bl	8003f58 <__smakebuf_r>
 8003b1a:	220c      	movs	r2, #12
 8003b1c:	5ea3      	ldrsh	r3, [r4, r2]
 8003b1e:	2001      	movs	r0, #1
 8003b20:	001a      	movs	r2, r3
 8003b22:	b299      	uxth	r1, r3
 8003b24:	4002      	ands	r2, r0
 8003b26:	4203      	tst	r3, r0
 8003b28:	d00f      	beq.n	8003b4a <__swsetup_r+0xd6>
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60a2      	str	r2, [r4, #8]
 8003b2e:	6962      	ldr	r2, [r4, #20]
 8003b30:	4252      	negs	r2, r2
 8003b32:	61a2      	str	r2, [r4, #24]
 8003b34:	2000      	movs	r0, #0
 8003b36:	6922      	ldr	r2, [r4, #16]
 8003b38:	4282      	cmp	r2, r0
 8003b3a:	d1ba      	bne.n	8003ab2 <__swsetup_r+0x3e>
 8003b3c:	060a      	lsls	r2, r1, #24
 8003b3e:	d5b8      	bpl.n	8003ab2 <__swsetup_r+0x3e>
 8003b40:	2240      	movs	r2, #64	; 0x40
 8003b42:	4313      	orrs	r3, r2
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	3801      	subs	r0, #1
 8003b48:	e7b3      	b.n	8003ab2 <__swsetup_r+0x3e>
 8003b4a:	0788      	lsls	r0, r1, #30
 8003b4c:	d400      	bmi.n	8003b50 <__swsetup_r+0xdc>
 8003b4e:	6962      	ldr	r2, [r4, #20]
 8003b50:	60a2      	str	r2, [r4, #8]
 8003b52:	e7ef      	b.n	8003b34 <__swsetup_r+0xc0>
 8003b54:	20000024 	.word	0x20000024
 8003b58:	0800686c 	.word	0x0800686c
 8003b5c:	0800688c 	.word	0x0800688c
 8003b60:	0800684c 	.word	0x0800684c

08003b64 <__sflush_r>:
 8003b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b66:	898b      	ldrh	r3, [r1, #12]
 8003b68:	0005      	movs	r5, r0
 8003b6a:	000c      	movs	r4, r1
 8003b6c:	071a      	lsls	r2, r3, #28
 8003b6e:	d45f      	bmi.n	8003c30 <__sflush_r+0xcc>
 8003b70:	684a      	ldr	r2, [r1, #4]
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	dc04      	bgt.n	8003b80 <__sflush_r+0x1c>
 8003b76:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	dc01      	bgt.n	8003b80 <__sflush_r+0x1c>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b80:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b82:	2f00      	cmp	r7, #0
 8003b84:	d0fa      	beq.n	8003b7c <__sflush_r+0x18>
 8003b86:	2200      	movs	r2, #0
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	682e      	ldr	r6, [r5, #0]
 8003b8c:	602a      	str	r2, [r5, #0]
 8003b8e:	001a      	movs	r2, r3
 8003b90:	0149      	lsls	r1, r1, #5
 8003b92:	400a      	ands	r2, r1
 8003b94:	420b      	tst	r3, r1
 8003b96:	d034      	beq.n	8003c02 <__sflush_r+0x9e>
 8003b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	075b      	lsls	r3, r3, #29
 8003b9e:	d506      	bpl.n	8003bae <__sflush_r+0x4a>
 8003ba0:	6863      	ldr	r3, [r4, #4]
 8003ba2:	1ac0      	subs	r0, r0, r3
 8003ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <__sflush_r+0x4a>
 8003baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bac:	1ac0      	subs	r0, r0, r3
 8003bae:	0002      	movs	r2, r0
 8003bb0:	6a21      	ldr	r1, [r4, #32]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	0028      	movs	r0, r5
 8003bb6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003bb8:	47b8      	blx	r7
 8003bba:	89a1      	ldrh	r1, [r4, #12]
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d106      	bne.n	8003bce <__sflush_r+0x6a>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	2b1d      	cmp	r3, #29
 8003bc4:	d831      	bhi.n	8003c2a <__sflush_r+0xc6>
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <__sflush_r+0x114>)
 8003bc8:	40da      	lsrs	r2, r3
 8003bca:	07d3      	lsls	r3, r2, #31
 8003bcc:	d52d      	bpl.n	8003c2a <__sflush_r+0xc6>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6063      	str	r3, [r4, #4]
 8003bd2:	6923      	ldr	r3, [r4, #16]
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	04cb      	lsls	r3, r1, #19
 8003bd8:	d505      	bpl.n	8003be6 <__sflush_r+0x82>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d102      	bne.n	8003be4 <__sflush_r+0x80>
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d100      	bne.n	8003be6 <__sflush_r+0x82>
 8003be4:	6560      	str	r0, [r4, #84]	; 0x54
 8003be6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003be8:	602e      	str	r6, [r5, #0]
 8003bea:	2900      	cmp	r1, #0
 8003bec:	d0c6      	beq.n	8003b7c <__sflush_r+0x18>
 8003bee:	0023      	movs	r3, r4
 8003bf0:	3344      	adds	r3, #68	; 0x44
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	d002      	beq.n	8003bfc <__sflush_r+0x98>
 8003bf6:	0028      	movs	r0, r5
 8003bf8:	f000 f9f2 	bl	8003fe0 <_free_r>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	6360      	str	r0, [r4, #52]	; 0x34
 8003c00:	e7bd      	b.n	8003b7e <__sflush_r+0x1a>
 8003c02:	2301      	movs	r3, #1
 8003c04:	0028      	movs	r0, r5
 8003c06:	6a21      	ldr	r1, [r4, #32]
 8003c08:	47b8      	blx	r7
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	d1c5      	bne.n	8003b9a <__sflush_r+0x36>
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0c2      	beq.n	8003b9a <__sflush_r+0x36>
 8003c14:	2b1d      	cmp	r3, #29
 8003c16:	d001      	beq.n	8003c1c <__sflush_r+0xb8>
 8003c18:	2b16      	cmp	r3, #22
 8003c1a:	d101      	bne.n	8003c20 <__sflush_r+0xbc>
 8003c1c:	602e      	str	r6, [r5, #0]
 8003c1e:	e7ad      	b.n	8003b7c <__sflush_r+0x18>
 8003c20:	2340      	movs	r3, #64	; 0x40
 8003c22:	89a2      	ldrh	r2, [r4, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	e7a9      	b.n	8003b7e <__sflush_r+0x1a>
 8003c2a:	2340      	movs	r3, #64	; 0x40
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	e7fa      	b.n	8003c26 <__sflush_r+0xc2>
 8003c30:	690f      	ldr	r7, [r1, #16]
 8003c32:	2f00      	cmp	r7, #0
 8003c34:	d0a2      	beq.n	8003b7c <__sflush_r+0x18>
 8003c36:	680a      	ldr	r2, [r1, #0]
 8003c38:	600f      	str	r7, [r1, #0]
 8003c3a:	1bd2      	subs	r2, r2, r7
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	079b      	lsls	r3, r3, #30
 8003c42:	d100      	bne.n	8003c46 <__sflush_r+0xe2>
 8003c44:	694a      	ldr	r2, [r1, #20]
 8003c46:	60a2      	str	r2, [r4, #8]
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	dc00      	bgt.n	8003c50 <__sflush_r+0xec>
 8003c4e:	e795      	b.n	8003b7c <__sflush_r+0x18>
 8003c50:	003a      	movs	r2, r7
 8003c52:	0028      	movs	r0, r5
 8003c54:	9b01      	ldr	r3, [sp, #4]
 8003c56:	6a21      	ldr	r1, [r4, #32]
 8003c58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c5a:	47b0      	blx	r6
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	dc06      	bgt.n	8003c6e <__sflush_r+0x10a>
 8003c60:	2340      	movs	r3, #64	; 0x40
 8003c62:	2001      	movs	r0, #1
 8003c64:	89a2      	ldrh	r2, [r4, #12]
 8003c66:	4240      	negs	r0, r0
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	81a3      	strh	r3, [r4, #12]
 8003c6c:	e787      	b.n	8003b7e <__sflush_r+0x1a>
 8003c6e:	9b01      	ldr	r3, [sp, #4]
 8003c70:	183f      	adds	r7, r7, r0
 8003c72:	1a1b      	subs	r3, r3, r0
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	e7e7      	b.n	8003c48 <__sflush_r+0xe4>
 8003c78:	20400001 	.word	0x20400001

08003c7c <_fflush_r>:
 8003c7c:	690b      	ldr	r3, [r1, #16]
 8003c7e:	b570      	push	{r4, r5, r6, lr}
 8003c80:	0005      	movs	r5, r0
 8003c82:	000c      	movs	r4, r1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <_fflush_r+0x12>
 8003c88:	2500      	movs	r5, #0
 8003c8a:	0028      	movs	r0, r5
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d004      	beq.n	8003c9c <_fflush_r+0x20>
 8003c92:	6983      	ldr	r3, [r0, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <_fflush_r+0x20>
 8003c98:	f000 f892 	bl	8003dc0 <__sinit>
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <_fflush_r+0x74>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d11b      	bne.n	8003cda <_fflush_r+0x5e>
 8003ca2:	686c      	ldr	r4, [r5, #4]
 8003ca4:	220c      	movs	r2, #12
 8003ca6:	5ea3      	ldrsh	r3, [r4, r2]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ed      	beq.n	8003c88 <_fflush_r+0xc>
 8003cac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cae:	07d2      	lsls	r2, r2, #31
 8003cb0:	d404      	bmi.n	8003cbc <_fflush_r+0x40>
 8003cb2:	059b      	lsls	r3, r3, #22
 8003cb4:	d402      	bmi.n	8003cbc <_fflush_r+0x40>
 8003cb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb8:	f000 f923 	bl	8003f02 <__retarget_lock_acquire_recursive>
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	0021      	movs	r1, r4
 8003cc0:	f7ff ff50 	bl	8003b64 <__sflush_r>
 8003cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cc6:	0005      	movs	r5, r0
 8003cc8:	07db      	lsls	r3, r3, #31
 8003cca:	d4de      	bmi.n	8003c8a <_fflush_r+0xe>
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	059b      	lsls	r3, r3, #22
 8003cd0:	d4db      	bmi.n	8003c8a <_fflush_r+0xe>
 8003cd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cd4:	f000 f916 	bl	8003f04 <__retarget_lock_release_recursive>
 8003cd8:	e7d7      	b.n	8003c8a <_fflush_r+0xe>
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <_fflush_r+0x78>)
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	d101      	bne.n	8003ce4 <_fflush_r+0x68>
 8003ce0:	68ac      	ldr	r4, [r5, #8]
 8003ce2:	e7df      	b.n	8003ca4 <_fflush_r+0x28>
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <_fflush_r+0x7c>)
 8003ce6:	429c      	cmp	r4, r3
 8003ce8:	d1dc      	bne.n	8003ca4 <_fflush_r+0x28>
 8003cea:	68ec      	ldr	r4, [r5, #12]
 8003cec:	e7da      	b.n	8003ca4 <_fflush_r+0x28>
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	0800686c 	.word	0x0800686c
 8003cf4:	0800688c 	.word	0x0800688c
 8003cf8:	0800684c 	.word	0x0800684c

08003cfc <std>:
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	0004      	movs	r4, r0
 8003d02:	6003      	str	r3, [r0, #0]
 8003d04:	6043      	str	r3, [r0, #4]
 8003d06:	6083      	str	r3, [r0, #8]
 8003d08:	8181      	strh	r1, [r0, #12]
 8003d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	81c2      	strh	r2, [r0, #14]
 8003d10:	6103      	str	r3, [r0, #16]
 8003d12:	6143      	str	r3, [r0, #20]
 8003d14:	6183      	str	r3, [r0, #24]
 8003d16:	2208      	movs	r2, #8
 8003d18:	305c      	adds	r0, #92	; 0x5c
 8003d1a:	f7ff fdb7 	bl	800388c <memset>
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <std+0x38>)
 8003d20:	6224      	str	r4, [r4, #32]
 8003d22:	6263      	str	r3, [r4, #36]	; 0x24
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <std+0x3c>)
 8003d26:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <std+0x40>)
 8003d2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <std+0x44>)
 8003d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	08004791 	.word	0x08004791
 8003d38:	080047b9 	.word	0x080047b9
 8003d3c:	080047f1 	.word	0x080047f1
 8003d40:	0800481d 	.word	0x0800481d

08003d44 <_cleanup_r>:
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4902      	ldr	r1, [pc, #8]	; (8003d50 <_cleanup_r+0xc>)
 8003d48:	f000 f8ba 	bl	8003ec0 <_fwalk_reent>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	08003c7d 	.word	0x08003c7d

08003d54 <__sfmoreglue>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	2568      	movs	r5, #104	; 0x68
 8003d58:	1e4a      	subs	r2, r1, #1
 8003d5a:	4355      	muls	r5, r2
 8003d5c:	000e      	movs	r6, r1
 8003d5e:	0029      	movs	r1, r5
 8003d60:	3174      	adds	r1, #116	; 0x74
 8003d62:	f000 f9a9 	bl	80040b8 <_malloc_r>
 8003d66:	1e04      	subs	r4, r0, #0
 8003d68:	d008      	beq.n	8003d7c <__sfmoreglue+0x28>
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	002a      	movs	r2, r5
 8003d6e:	6001      	str	r1, [r0, #0]
 8003d70:	6046      	str	r6, [r0, #4]
 8003d72:	300c      	adds	r0, #12
 8003d74:	60a0      	str	r0, [r4, #8]
 8003d76:	3268      	adds	r2, #104	; 0x68
 8003d78:	f7ff fd88 	bl	800388c <memset>
 8003d7c:	0020      	movs	r0, r4
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}

08003d80 <__sfp_lock_acquire>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4802      	ldr	r0, [pc, #8]	; (8003d8c <__sfp_lock_acquire+0xc>)
 8003d84:	f000 f8bd 	bl	8003f02 <__retarget_lock_acquire_recursive>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	20003c25 	.word	0x20003c25

08003d90 <__sfp_lock_release>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4802      	ldr	r0, [pc, #8]	; (8003d9c <__sfp_lock_release+0xc>)
 8003d94:	f000 f8b6 	bl	8003f04 <__retarget_lock_release_recursive>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	20003c25 	.word	0x20003c25

08003da0 <__sinit_lock_acquire>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4802      	ldr	r0, [pc, #8]	; (8003dac <__sinit_lock_acquire+0xc>)
 8003da4:	f000 f8ad 	bl	8003f02 <__retarget_lock_acquire_recursive>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20003c26 	.word	0x20003c26

08003db0 <__sinit_lock_release>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4802      	ldr	r0, [pc, #8]	; (8003dbc <__sinit_lock_release+0xc>)
 8003db4:	f000 f8a6 	bl	8003f04 <__retarget_lock_release_recursive>
 8003db8:	bd10      	pop	{r4, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	20003c26 	.word	0x20003c26

08003dc0 <__sinit>:
 8003dc0:	b513      	push	{r0, r1, r4, lr}
 8003dc2:	0004      	movs	r4, r0
 8003dc4:	f7ff ffec 	bl	8003da0 <__sinit_lock_acquire>
 8003dc8:	69a3      	ldr	r3, [r4, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <__sinit+0x14>
 8003dce:	f7ff ffef 	bl	8003db0 <__sinit_lock_release>
 8003dd2:	bd13      	pop	{r0, r1, r4, pc}
 8003dd4:	64a3      	str	r3, [r4, #72]	; 0x48
 8003dd6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <__sinit+0x68>)
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <__sinit+0x6c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d101      	bne.n	8003dec <__sinit+0x2c>
 8003de8:	2301      	movs	r3, #1
 8003dea:	61a3      	str	r3, [r4, #24]
 8003dec:	0020      	movs	r0, r4
 8003dee:	f000 f81f 	bl	8003e30 <__sfp>
 8003df2:	6060      	str	r0, [r4, #4]
 8003df4:	0020      	movs	r0, r4
 8003df6:	f000 f81b 	bl	8003e30 <__sfp>
 8003dfa:	60a0      	str	r0, [r4, #8]
 8003dfc:	0020      	movs	r0, r4
 8003dfe:	f000 f817 	bl	8003e30 <__sfp>
 8003e02:	2200      	movs	r2, #0
 8003e04:	2104      	movs	r1, #4
 8003e06:	60e0      	str	r0, [r4, #12]
 8003e08:	6860      	ldr	r0, [r4, #4]
 8003e0a:	f7ff ff77 	bl	8003cfc <std>
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2109      	movs	r1, #9
 8003e12:	68a0      	ldr	r0, [r4, #8]
 8003e14:	f7ff ff72 	bl	8003cfc <std>
 8003e18:	2202      	movs	r2, #2
 8003e1a:	2112      	movs	r1, #18
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	f7ff ff6d 	bl	8003cfc <std>
 8003e22:	2301      	movs	r3, #1
 8003e24:	61a3      	str	r3, [r4, #24]
 8003e26:	e7d2      	b.n	8003dce <__sinit+0xe>
 8003e28:	08006848 	.word	0x08006848
 8003e2c:	08003d45 	.word	0x08003d45

08003e30 <__sfp>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	0007      	movs	r7, r0
 8003e34:	f7ff ffa4 	bl	8003d80 <__sfp_lock_acquire>
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <__sfp+0x88>)
 8003e3a:	681e      	ldr	r6, [r3, #0]
 8003e3c:	69b3      	ldr	r3, [r6, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <__sfp+0x18>
 8003e42:	0030      	movs	r0, r6
 8003e44:	f7ff ffbc 	bl	8003dc0 <__sinit>
 8003e48:	3648      	adds	r6, #72	; 0x48
 8003e4a:	68b4      	ldr	r4, [r6, #8]
 8003e4c:	6873      	ldr	r3, [r6, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	d504      	bpl.n	8003e5c <__sfp+0x2c>
 8003e52:	6833      	ldr	r3, [r6, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <__sfp+0x6e>
 8003e58:	6836      	ldr	r6, [r6, #0]
 8003e5a:	e7f6      	b.n	8003e4a <__sfp+0x1a>
 8003e5c:	220c      	movs	r2, #12
 8003e5e:	5ea5      	ldrsh	r5, [r4, r2]
 8003e60:	2d00      	cmp	r5, #0
 8003e62:	d11a      	bne.n	8003e9a <__sfp+0x6a>
 8003e64:	0020      	movs	r0, r4
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <__sfp+0x8c>)
 8003e68:	3058      	adds	r0, #88	; 0x58
 8003e6a:	60e3      	str	r3, [r4, #12]
 8003e6c:	6665      	str	r5, [r4, #100]	; 0x64
 8003e6e:	f000 f847 	bl	8003f00 <__retarget_lock_init_recursive>
 8003e72:	f7ff ff8d 	bl	8003d90 <__sfp_lock_release>
 8003e76:	0020      	movs	r0, r4
 8003e78:	2208      	movs	r2, #8
 8003e7a:	0029      	movs	r1, r5
 8003e7c:	6025      	str	r5, [r4, #0]
 8003e7e:	60a5      	str	r5, [r4, #8]
 8003e80:	6065      	str	r5, [r4, #4]
 8003e82:	6125      	str	r5, [r4, #16]
 8003e84:	6165      	str	r5, [r4, #20]
 8003e86:	61a5      	str	r5, [r4, #24]
 8003e88:	305c      	adds	r0, #92	; 0x5c
 8003e8a:	f7ff fcff 	bl	800388c <memset>
 8003e8e:	6365      	str	r5, [r4, #52]	; 0x34
 8003e90:	63a5      	str	r5, [r4, #56]	; 0x38
 8003e92:	64a5      	str	r5, [r4, #72]	; 0x48
 8003e94:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003e96:	0020      	movs	r0, r4
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9a:	3468      	adds	r4, #104	; 0x68
 8003e9c:	e7d7      	b.n	8003e4e <__sfp+0x1e>
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	0038      	movs	r0, r7
 8003ea2:	f7ff ff57 	bl	8003d54 <__sfmoreglue>
 8003ea6:	1e04      	subs	r4, r0, #0
 8003ea8:	6030      	str	r0, [r6, #0]
 8003eaa:	d1d5      	bne.n	8003e58 <__sfp+0x28>
 8003eac:	f7ff ff70 	bl	8003d90 <__sfp_lock_release>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	e7ef      	b.n	8003e96 <__sfp+0x66>
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	08006848 	.word	0x08006848
 8003ebc:	ffff0001 	.word	0xffff0001

08003ec0 <_fwalk_reent>:
 8003ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ec2:	0004      	movs	r4, r0
 8003ec4:	0006      	movs	r6, r0
 8003ec6:	2700      	movs	r7, #0
 8003ec8:	9101      	str	r1, [sp, #4]
 8003eca:	3448      	adds	r4, #72	; 0x48
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	68a5      	ldr	r5, [r4, #8]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	9b00      	ldr	r3, [sp, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	d504      	bpl.n	8003ee4 <_fwalk_reent+0x24>
 8003eda:	6824      	ldr	r4, [r4, #0]
 8003edc:	2c00      	cmp	r4, #0
 8003ede:	d1f5      	bne.n	8003ecc <_fwalk_reent+0xc>
 8003ee0:	0038      	movs	r0, r7
 8003ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ee4:	89ab      	ldrh	r3, [r5, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d908      	bls.n	8003efc <_fwalk_reent+0x3c>
 8003eea:	220e      	movs	r2, #14
 8003eec:	5eab      	ldrsh	r3, [r5, r2]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	d004      	beq.n	8003efc <_fwalk_reent+0x3c>
 8003ef2:	0029      	movs	r1, r5
 8003ef4:	0030      	movs	r0, r6
 8003ef6:	9b01      	ldr	r3, [sp, #4]
 8003ef8:	4798      	blx	r3
 8003efa:	4307      	orrs	r7, r0
 8003efc:	3568      	adds	r5, #104	; 0x68
 8003efe:	e7e8      	b.n	8003ed2 <_fwalk_reent+0x12>

08003f00 <__retarget_lock_init_recursive>:
 8003f00:	4770      	bx	lr

08003f02 <__retarget_lock_acquire_recursive>:
 8003f02:	4770      	bx	lr

08003f04 <__retarget_lock_release_recursive>:
 8003f04:	4770      	bx	lr
	...

08003f08 <__swhatbuf_r>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	000e      	movs	r6, r1
 8003f0c:	001d      	movs	r5, r3
 8003f0e:	230e      	movs	r3, #14
 8003f10:	5ec9      	ldrsh	r1, [r1, r3]
 8003f12:	0014      	movs	r4, r2
 8003f14:	b096      	sub	sp, #88	; 0x58
 8003f16:	2900      	cmp	r1, #0
 8003f18:	da08      	bge.n	8003f2c <__swhatbuf_r+0x24>
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	5eb3      	ldrsh	r3, [r6, r2]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	602a      	str	r2, [r5, #0]
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	d411      	bmi.n	8003f4a <__swhatbuf_r+0x42>
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	e00f      	b.n	8003f4c <__swhatbuf_r+0x44>
 8003f2c:	466a      	mov	r2, sp
 8003f2e:	f000 fca1 	bl	8004874 <_fstat_r>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	dbf1      	blt.n	8003f1a <__swhatbuf_r+0x12>
 8003f36:	23f0      	movs	r3, #240	; 0xf0
 8003f38:	9901      	ldr	r1, [sp, #4]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	4019      	ands	r1, r3
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <__swhatbuf_r+0x4c>)
 8003f40:	18c9      	adds	r1, r1, r3
 8003f42:	424b      	negs	r3, r1
 8003f44:	4159      	adcs	r1, r3
 8003f46:	6029      	str	r1, [r5, #0]
 8003f48:	e7ed      	b.n	8003f26 <__swhatbuf_r+0x1e>
 8003f4a:	2340      	movs	r3, #64	; 0x40
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	b016      	add	sp, #88	; 0x58
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	ffffe000 	.word	0xffffe000

08003f58 <__smakebuf_r>:
 8003f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f5a:	2602      	movs	r6, #2
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	0005      	movs	r5, r0
 8003f60:	000c      	movs	r4, r1
 8003f62:	4233      	tst	r3, r6
 8003f64:	d006      	beq.n	8003f74 <__smakebuf_r+0x1c>
 8003f66:	0023      	movs	r3, r4
 8003f68:	3347      	adds	r3, #71	; 0x47
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	6123      	str	r3, [r4, #16]
 8003f6e:	2301      	movs	r3, #1
 8003f70:	6163      	str	r3, [r4, #20]
 8003f72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f74:	466a      	mov	r2, sp
 8003f76:	ab01      	add	r3, sp, #4
 8003f78:	f7ff ffc6 	bl	8003f08 <__swhatbuf_r>
 8003f7c:	9900      	ldr	r1, [sp, #0]
 8003f7e:	0007      	movs	r7, r0
 8003f80:	0028      	movs	r0, r5
 8003f82:	f000 f899 	bl	80040b8 <_malloc_r>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d108      	bne.n	8003f9c <__smakebuf_r+0x44>
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	5ea3      	ldrsh	r3, [r4, r2]
 8003f8e:	059a      	lsls	r2, r3, #22
 8003f90:	d4ef      	bmi.n	8003f72 <__smakebuf_r+0x1a>
 8003f92:	2203      	movs	r2, #3
 8003f94:	4393      	bics	r3, r2
 8003f96:	431e      	orrs	r6, r3
 8003f98:	81a6      	strh	r6, [r4, #12]
 8003f9a:	e7e4      	b.n	8003f66 <__smakebuf_r+0xe>
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <__smakebuf_r+0x84>)
 8003f9e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	89a2      	ldrh	r2, [r4, #12]
 8003fa4:	6020      	str	r0, [r4, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	81a3      	strh	r3, [r4, #12]
 8003faa:	9b00      	ldr	r3, [sp, #0]
 8003fac:	6120      	str	r0, [r4, #16]
 8003fae:	6163      	str	r3, [r4, #20]
 8003fb0:	9b01      	ldr	r3, [sp, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <__smakebuf_r+0x7a>
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	230e      	movs	r3, #14
 8003fba:	5ee1      	ldrsh	r1, [r4, r3]
 8003fbc:	f000 fc6c 	bl	8004898 <_isatty_r>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d006      	beq.n	8003fd2 <__smakebuf_r+0x7a>
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	4393      	bics	r3, r2
 8003fca:	001a      	movs	r2, r3
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	89a0      	ldrh	r0, [r4, #12]
 8003fd4:	4307      	orrs	r7, r0
 8003fd6:	81a7      	strh	r7, [r4, #12]
 8003fd8:	e7cb      	b.n	8003f72 <__smakebuf_r+0x1a>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	08003d45 	.word	0x08003d45

08003fe0 <_free_r>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	0005      	movs	r5, r0
 8003fe4:	2900      	cmp	r1, #0
 8003fe6:	d010      	beq.n	800400a <_free_r+0x2a>
 8003fe8:	1f0c      	subs	r4, r1, #4
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da00      	bge.n	8003ff2 <_free_r+0x12>
 8003ff0:	18e4      	adds	r4, r4, r3
 8003ff2:	0028      	movs	r0, r5
 8003ff4:	f000 fc82 	bl	80048fc <__malloc_lock>
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <_free_r+0x90>)
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <_free_r+0x2c>
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	6014      	str	r4, [r2, #0]
 8004004:	0028      	movs	r0, r5
 8004006:	f000 fc81 	bl	800490c <__malloc_unlock>
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	42a3      	cmp	r3, r4
 800400e:	d908      	bls.n	8004022 <_free_r+0x42>
 8004010:	6821      	ldr	r1, [r4, #0]
 8004012:	1860      	adds	r0, r4, r1
 8004014:	4283      	cmp	r3, r0
 8004016:	d1f3      	bne.n	8004000 <_free_r+0x20>
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	1841      	adds	r1, r0, r1
 800401e:	6021      	str	r1, [r4, #0]
 8004020:	e7ee      	b.n	8004000 <_free_r+0x20>
 8004022:	001a      	movs	r2, r3
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <_free_r+0x4e>
 800402a:	42a3      	cmp	r3, r4
 800402c:	d9f9      	bls.n	8004022 <_free_r+0x42>
 800402e:	6811      	ldr	r1, [r2, #0]
 8004030:	1850      	adds	r0, r2, r1
 8004032:	42a0      	cmp	r0, r4
 8004034:	d10b      	bne.n	800404e <_free_r+0x6e>
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	1809      	adds	r1, r1, r0
 800403a:	1850      	adds	r0, r2, r1
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	4283      	cmp	r3, r0
 8004040:	d1e0      	bne.n	8004004 <_free_r+0x24>
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	1841      	adds	r1, r0, r1
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	6053      	str	r3, [r2, #4]
 800404c:	e7da      	b.n	8004004 <_free_r+0x24>
 800404e:	42a0      	cmp	r0, r4
 8004050:	d902      	bls.n	8004058 <_free_r+0x78>
 8004052:	230c      	movs	r3, #12
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	e7d5      	b.n	8004004 <_free_r+0x24>
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	1860      	adds	r0, r4, r1
 800405c:	4283      	cmp	r3, r0
 800405e:	d103      	bne.n	8004068 <_free_r+0x88>
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	1841      	adds	r1, r0, r1
 8004066:	6021      	str	r1, [r4, #0]
 8004068:	6063      	str	r3, [r4, #4]
 800406a:	6054      	str	r4, [r2, #4]
 800406c:	e7ca      	b.n	8004004 <_free_r+0x24>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	20003c28 	.word	0x20003c28

08004074 <sbrk_aligned>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	4e0f      	ldr	r6, [pc, #60]	; (80040b4 <sbrk_aligned+0x40>)
 8004078:	000d      	movs	r5, r1
 800407a:	6831      	ldr	r1, [r6, #0]
 800407c:	0004      	movs	r4, r0
 800407e:	2900      	cmp	r1, #0
 8004080:	d102      	bne.n	8004088 <sbrk_aligned+0x14>
 8004082:	f000 fb73 	bl	800476c <_sbrk_r>
 8004086:	6030      	str	r0, [r6, #0]
 8004088:	0029      	movs	r1, r5
 800408a:	0020      	movs	r0, r4
 800408c:	f000 fb6e 	bl	800476c <_sbrk_r>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d00a      	beq.n	80040aa <sbrk_aligned+0x36>
 8004094:	2303      	movs	r3, #3
 8004096:	1cc5      	adds	r5, r0, #3
 8004098:	439d      	bics	r5, r3
 800409a:	42a8      	cmp	r0, r5
 800409c:	d007      	beq.n	80040ae <sbrk_aligned+0x3a>
 800409e:	1a29      	subs	r1, r5, r0
 80040a0:	0020      	movs	r0, r4
 80040a2:	f000 fb63 	bl	800476c <_sbrk_r>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	d101      	bne.n	80040ae <sbrk_aligned+0x3a>
 80040aa:	2501      	movs	r5, #1
 80040ac:	426d      	negs	r5, r5
 80040ae:	0028      	movs	r0, r5
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	20003c2c 	.word	0x20003c2c

080040b8 <_malloc_r>:
 80040b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ba:	2203      	movs	r2, #3
 80040bc:	1ccb      	adds	r3, r1, #3
 80040be:	4393      	bics	r3, r2
 80040c0:	3308      	adds	r3, #8
 80040c2:	0006      	movs	r6, r0
 80040c4:	001f      	movs	r7, r3
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d232      	bcs.n	8004130 <_malloc_r+0x78>
 80040ca:	270c      	movs	r7, #12
 80040cc:	42b9      	cmp	r1, r7
 80040ce:	d831      	bhi.n	8004134 <_malloc_r+0x7c>
 80040d0:	0030      	movs	r0, r6
 80040d2:	f000 fc13 	bl	80048fc <__malloc_lock>
 80040d6:	4d32      	ldr	r5, [pc, #200]	; (80041a0 <_malloc_r+0xe8>)
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	001c      	movs	r4, r3
 80040dc:	2c00      	cmp	r4, #0
 80040de:	d12e      	bne.n	800413e <_malloc_r+0x86>
 80040e0:	0039      	movs	r1, r7
 80040e2:	0030      	movs	r0, r6
 80040e4:	f7ff ffc6 	bl	8004074 <sbrk_aligned>
 80040e8:	0004      	movs	r4, r0
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d11e      	bne.n	800412c <_malloc_r+0x74>
 80040ee:	682c      	ldr	r4, [r5, #0]
 80040f0:	0025      	movs	r5, r4
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d14a      	bne.n	800418c <_malloc_r+0xd4>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	0029      	movs	r1, r5
 80040fa:	18e3      	adds	r3, r4, r3
 80040fc:	0030      	movs	r0, r6
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	f000 fb34 	bl	800476c <_sbrk_r>
 8004104:	9b01      	ldr	r3, [sp, #4]
 8004106:	4283      	cmp	r3, r0
 8004108:	d143      	bne.n	8004192 <_malloc_r+0xda>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	3703      	adds	r7, #3
 800410e:	1aff      	subs	r7, r7, r3
 8004110:	2303      	movs	r3, #3
 8004112:	439f      	bics	r7, r3
 8004114:	3708      	adds	r7, #8
 8004116:	2f0c      	cmp	r7, #12
 8004118:	d200      	bcs.n	800411c <_malloc_r+0x64>
 800411a:	270c      	movs	r7, #12
 800411c:	0039      	movs	r1, r7
 800411e:	0030      	movs	r0, r6
 8004120:	f7ff ffa8 	bl	8004074 <sbrk_aligned>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d034      	beq.n	8004192 <_malloc_r+0xda>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	19df      	adds	r7, r3, r7
 800412c:	6027      	str	r7, [r4, #0]
 800412e:	e013      	b.n	8004158 <_malloc_r+0xa0>
 8004130:	2b00      	cmp	r3, #0
 8004132:	dacb      	bge.n	80040cc <_malloc_r+0x14>
 8004134:	230c      	movs	r3, #12
 8004136:	2500      	movs	r5, #0
 8004138:	6033      	str	r3, [r6, #0]
 800413a:	0028      	movs	r0, r5
 800413c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	1bd1      	subs	r1, r2, r7
 8004142:	d420      	bmi.n	8004186 <_malloc_r+0xce>
 8004144:	290b      	cmp	r1, #11
 8004146:	d917      	bls.n	8004178 <_malloc_r+0xc0>
 8004148:	19e2      	adds	r2, r4, r7
 800414a:	6027      	str	r7, [r4, #0]
 800414c:	42a3      	cmp	r3, r4
 800414e:	d111      	bne.n	8004174 <_malloc_r+0xbc>
 8004150:	602a      	str	r2, [r5, #0]
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	6053      	str	r3, [r2, #4]
 8004158:	0030      	movs	r0, r6
 800415a:	0025      	movs	r5, r4
 800415c:	f000 fbd6 	bl	800490c <__malloc_unlock>
 8004160:	2207      	movs	r2, #7
 8004162:	350b      	adds	r5, #11
 8004164:	1d23      	adds	r3, r4, #4
 8004166:	4395      	bics	r5, r2
 8004168:	1aea      	subs	r2, r5, r3
 800416a:	429d      	cmp	r5, r3
 800416c:	d0e5      	beq.n	800413a <_malloc_r+0x82>
 800416e:	1b5b      	subs	r3, r3, r5
 8004170:	50a3      	str	r3, [r4, r2]
 8004172:	e7e2      	b.n	800413a <_malloc_r+0x82>
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	e7ec      	b.n	8004152 <_malloc_r+0x9a>
 8004178:	6862      	ldr	r2, [r4, #4]
 800417a:	42a3      	cmp	r3, r4
 800417c:	d101      	bne.n	8004182 <_malloc_r+0xca>
 800417e:	602a      	str	r2, [r5, #0]
 8004180:	e7ea      	b.n	8004158 <_malloc_r+0xa0>
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	e7e8      	b.n	8004158 <_malloc_r+0xa0>
 8004186:	0023      	movs	r3, r4
 8004188:	6864      	ldr	r4, [r4, #4]
 800418a:	e7a7      	b.n	80040dc <_malloc_r+0x24>
 800418c:	002c      	movs	r4, r5
 800418e:	686d      	ldr	r5, [r5, #4]
 8004190:	e7af      	b.n	80040f2 <_malloc_r+0x3a>
 8004192:	230c      	movs	r3, #12
 8004194:	0030      	movs	r0, r6
 8004196:	6033      	str	r3, [r6, #0]
 8004198:	f000 fbb8 	bl	800490c <__malloc_unlock>
 800419c:	e7cd      	b.n	800413a <_malloc_r+0x82>
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20003c28 	.word	0x20003c28

080041a4 <__sfputc_r>:
 80041a4:	6893      	ldr	r3, [r2, #8]
 80041a6:	b510      	push	{r4, lr}
 80041a8:	3b01      	subs	r3, #1
 80041aa:	6093      	str	r3, [r2, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	da04      	bge.n	80041ba <__sfputc_r+0x16>
 80041b0:	6994      	ldr	r4, [r2, #24]
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	db07      	blt.n	80041c6 <__sfputc_r+0x22>
 80041b6:	290a      	cmp	r1, #10
 80041b8:	d005      	beq.n	80041c6 <__sfputc_r+0x22>
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	1c58      	adds	r0, r3, #1
 80041be:	6010      	str	r0, [r2, #0]
 80041c0:	7019      	strb	r1, [r3, #0]
 80041c2:	0008      	movs	r0, r1
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	f7ff fbff 	bl	80039c8 <__swbuf_r>
 80041ca:	0001      	movs	r1, r0
 80041cc:	e7f9      	b.n	80041c2 <__sfputc_r+0x1e>

080041ce <__sfputs_r>:
 80041ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d0:	0006      	movs	r6, r0
 80041d2:	000f      	movs	r7, r1
 80041d4:	0014      	movs	r4, r2
 80041d6:	18d5      	adds	r5, r2, r3
 80041d8:	42ac      	cmp	r4, r5
 80041da:	d101      	bne.n	80041e0 <__sfputs_r+0x12>
 80041dc:	2000      	movs	r0, #0
 80041de:	e007      	b.n	80041f0 <__sfputs_r+0x22>
 80041e0:	7821      	ldrb	r1, [r4, #0]
 80041e2:	003a      	movs	r2, r7
 80041e4:	0030      	movs	r0, r6
 80041e6:	f7ff ffdd 	bl	80041a4 <__sfputc_r>
 80041ea:	3401      	adds	r4, #1
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d1f3      	bne.n	80041d8 <__sfputs_r+0xa>
 80041f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041f4 <_vfiprintf_r>:
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b0a1      	sub	sp, #132	; 0x84
 80041f8:	0006      	movs	r6, r0
 80041fa:	000c      	movs	r4, r1
 80041fc:	001f      	movs	r7, r3
 80041fe:	9203      	str	r2, [sp, #12]
 8004200:	2800      	cmp	r0, #0
 8004202:	d004      	beq.n	800420e <_vfiprintf_r+0x1a>
 8004204:	6983      	ldr	r3, [r0, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <_vfiprintf_r+0x1a>
 800420a:	f7ff fdd9 	bl	8003dc0 <__sinit>
 800420e:	4b8e      	ldr	r3, [pc, #568]	; (8004448 <_vfiprintf_r+0x254>)
 8004210:	429c      	cmp	r4, r3
 8004212:	d11c      	bne.n	800424e <_vfiprintf_r+0x5a>
 8004214:	6874      	ldr	r4, [r6, #4]
 8004216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004218:	07db      	lsls	r3, r3, #31
 800421a:	d405      	bmi.n	8004228 <_vfiprintf_r+0x34>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	059b      	lsls	r3, r3, #22
 8004220:	d402      	bmi.n	8004228 <_vfiprintf_r+0x34>
 8004222:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004224:	f7ff fe6d 	bl	8003f02 <__retarget_lock_acquire_recursive>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	071b      	lsls	r3, r3, #28
 800422c:	d502      	bpl.n	8004234 <_vfiprintf_r+0x40>
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d11d      	bne.n	8004270 <_vfiprintf_r+0x7c>
 8004234:	0021      	movs	r1, r4
 8004236:	0030      	movs	r0, r6
 8004238:	f7ff fc1c 	bl	8003a74 <__swsetup_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	d017      	beq.n	8004270 <_vfiprintf_r+0x7c>
 8004240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004242:	07db      	lsls	r3, r3, #31
 8004244:	d50d      	bpl.n	8004262 <_vfiprintf_r+0x6e>
 8004246:	2001      	movs	r0, #1
 8004248:	4240      	negs	r0, r0
 800424a:	b021      	add	sp, #132	; 0x84
 800424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <_vfiprintf_r+0x258>)
 8004250:	429c      	cmp	r4, r3
 8004252:	d101      	bne.n	8004258 <_vfiprintf_r+0x64>
 8004254:	68b4      	ldr	r4, [r6, #8]
 8004256:	e7de      	b.n	8004216 <_vfiprintf_r+0x22>
 8004258:	4b7d      	ldr	r3, [pc, #500]	; (8004450 <_vfiprintf_r+0x25c>)
 800425a:	429c      	cmp	r4, r3
 800425c:	d1db      	bne.n	8004216 <_vfiprintf_r+0x22>
 800425e:	68f4      	ldr	r4, [r6, #12]
 8004260:	e7d9      	b.n	8004216 <_vfiprintf_r+0x22>
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	059b      	lsls	r3, r3, #22
 8004266:	d4ee      	bmi.n	8004246 <_vfiprintf_r+0x52>
 8004268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800426a:	f7ff fe4b 	bl	8003f04 <__retarget_lock_release_recursive>
 800426e:	e7ea      	b.n	8004246 <_vfiprintf_r+0x52>
 8004270:	2300      	movs	r3, #0
 8004272:	ad08      	add	r5, sp, #32
 8004274:	616b      	str	r3, [r5, #20]
 8004276:	3320      	adds	r3, #32
 8004278:	766b      	strb	r3, [r5, #25]
 800427a:	3310      	adds	r3, #16
 800427c:	76ab      	strb	r3, [r5, #26]
 800427e:	9707      	str	r7, [sp, #28]
 8004280:	9f03      	ldr	r7, [sp, #12]
 8004282:	783b      	ldrb	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <_vfiprintf_r+0x98>
 8004288:	2b25      	cmp	r3, #37	; 0x25
 800428a:	d14e      	bne.n	800432a <_vfiprintf_r+0x136>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	1afb      	subs	r3, r7, r3
 8004290:	9305      	str	r3, [sp, #20]
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	429f      	cmp	r7, r3
 8004296:	d00d      	beq.n	80042b4 <_vfiprintf_r+0xc0>
 8004298:	9b05      	ldr	r3, [sp, #20]
 800429a:	0021      	movs	r1, r4
 800429c:	0030      	movs	r0, r6
 800429e:	9a03      	ldr	r2, [sp, #12]
 80042a0:	f7ff ff95 	bl	80041ce <__sfputs_r>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d100      	bne.n	80042aa <_vfiprintf_r+0xb6>
 80042a8:	e0b5      	b.n	8004416 <_vfiprintf_r+0x222>
 80042aa:	696a      	ldr	r2, [r5, #20]
 80042ac:	9b05      	ldr	r3, [sp, #20]
 80042ae:	4694      	mov	ip, r2
 80042b0:	4463      	add	r3, ip
 80042b2:	616b      	str	r3, [r5, #20]
 80042b4:	783b      	ldrb	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d100      	bne.n	80042bc <_vfiprintf_r+0xc8>
 80042ba:	e0ac      	b.n	8004416 <_vfiprintf_r+0x222>
 80042bc:	2201      	movs	r2, #1
 80042be:	1c7b      	adds	r3, r7, #1
 80042c0:	9303      	str	r3, [sp, #12]
 80042c2:	2300      	movs	r3, #0
 80042c4:	4252      	negs	r2, r2
 80042c6:	606a      	str	r2, [r5, #4]
 80042c8:	a904      	add	r1, sp, #16
 80042ca:	3254      	adds	r2, #84	; 0x54
 80042cc:	1852      	adds	r2, r2, r1
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	60eb      	str	r3, [r5, #12]
 80042d2:	60ab      	str	r3, [r5, #8]
 80042d4:	7013      	strb	r3, [r2, #0]
 80042d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	2205      	movs	r2, #5
 80042dc:	7819      	ldrb	r1, [r3, #0]
 80042de:	485d      	ldr	r0, [pc, #372]	; (8004454 <_vfiprintf_r+0x260>)
 80042e0:	f000 fb00 	bl	80048e4 <memchr>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	1c5f      	adds	r7, r3, #1
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d120      	bne.n	800432e <_vfiprintf_r+0x13a>
 80042ec:	682a      	ldr	r2, [r5, #0]
 80042ee:	06d3      	lsls	r3, r2, #27
 80042f0:	d504      	bpl.n	80042fc <_vfiprintf_r+0x108>
 80042f2:	2353      	movs	r3, #83	; 0x53
 80042f4:	a904      	add	r1, sp, #16
 80042f6:	185b      	adds	r3, r3, r1
 80042f8:	2120      	movs	r1, #32
 80042fa:	7019      	strb	r1, [r3, #0]
 80042fc:	0713      	lsls	r3, r2, #28
 80042fe:	d504      	bpl.n	800430a <_vfiprintf_r+0x116>
 8004300:	2353      	movs	r3, #83	; 0x53
 8004302:	a904      	add	r1, sp, #16
 8004304:	185b      	adds	r3, r3, r1
 8004306:	212b      	movs	r1, #43	; 0x2b
 8004308:	7019      	strb	r1, [r3, #0]
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b2a      	cmp	r3, #42	; 0x2a
 8004310:	d016      	beq.n	8004340 <_vfiprintf_r+0x14c>
 8004312:	2100      	movs	r1, #0
 8004314:	68eb      	ldr	r3, [r5, #12]
 8004316:	9f03      	ldr	r7, [sp, #12]
 8004318:	783a      	ldrb	r2, [r7, #0]
 800431a:	1c78      	adds	r0, r7, #1
 800431c:	3a30      	subs	r2, #48	; 0x30
 800431e:	4684      	mov	ip, r0
 8004320:	2a09      	cmp	r2, #9
 8004322:	d94f      	bls.n	80043c4 <_vfiprintf_r+0x1d0>
 8004324:	2900      	cmp	r1, #0
 8004326:	d111      	bne.n	800434c <_vfiprintf_r+0x158>
 8004328:	e017      	b.n	800435a <_vfiprintf_r+0x166>
 800432a:	3701      	adds	r7, #1
 800432c:	e7a9      	b.n	8004282 <_vfiprintf_r+0x8e>
 800432e:	4b49      	ldr	r3, [pc, #292]	; (8004454 <_vfiprintf_r+0x260>)
 8004330:	682a      	ldr	r2, [r5, #0]
 8004332:	1ac0      	subs	r0, r0, r3
 8004334:	2301      	movs	r3, #1
 8004336:	4083      	lsls	r3, r0
 8004338:	4313      	orrs	r3, r2
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	9703      	str	r7, [sp, #12]
 800433e:	e7cb      	b.n	80042d8 <_vfiprintf_r+0xe4>
 8004340:	9b07      	ldr	r3, [sp, #28]
 8004342:	1d19      	adds	r1, r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	9107      	str	r1, [sp, #28]
 8004348:	2b00      	cmp	r3, #0
 800434a:	db01      	blt.n	8004350 <_vfiprintf_r+0x15c>
 800434c:	930b      	str	r3, [sp, #44]	; 0x2c
 800434e:	e004      	b.n	800435a <_vfiprintf_r+0x166>
 8004350:	425b      	negs	r3, r3
 8004352:	60eb      	str	r3, [r5, #12]
 8004354:	2302      	movs	r3, #2
 8004356:	4313      	orrs	r3, r2
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	783b      	ldrb	r3, [r7, #0]
 800435c:	2b2e      	cmp	r3, #46	; 0x2e
 800435e:	d10a      	bne.n	8004376 <_vfiprintf_r+0x182>
 8004360:	787b      	ldrb	r3, [r7, #1]
 8004362:	2b2a      	cmp	r3, #42	; 0x2a
 8004364:	d137      	bne.n	80043d6 <_vfiprintf_r+0x1e2>
 8004366:	9b07      	ldr	r3, [sp, #28]
 8004368:	3702      	adds	r7, #2
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	9207      	str	r2, [sp, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db2d      	blt.n	80043d0 <_vfiprintf_r+0x1dc>
 8004374:	9309      	str	r3, [sp, #36]	; 0x24
 8004376:	2203      	movs	r2, #3
 8004378:	7839      	ldrb	r1, [r7, #0]
 800437a:	4837      	ldr	r0, [pc, #220]	; (8004458 <_vfiprintf_r+0x264>)
 800437c:	f000 fab2 	bl	80048e4 <memchr>
 8004380:	2800      	cmp	r0, #0
 8004382:	d007      	beq.n	8004394 <_vfiprintf_r+0x1a0>
 8004384:	4b34      	ldr	r3, [pc, #208]	; (8004458 <_vfiprintf_r+0x264>)
 8004386:	682a      	ldr	r2, [r5, #0]
 8004388:	1ac0      	subs	r0, r0, r3
 800438a:	2340      	movs	r3, #64	; 0x40
 800438c:	4083      	lsls	r3, r0
 800438e:	4313      	orrs	r3, r2
 8004390:	3701      	adds	r7, #1
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	7839      	ldrb	r1, [r7, #0]
 8004396:	1c7b      	adds	r3, r7, #1
 8004398:	2206      	movs	r2, #6
 800439a:	4830      	ldr	r0, [pc, #192]	; (800445c <_vfiprintf_r+0x268>)
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	7629      	strb	r1, [r5, #24]
 80043a0:	f000 faa0 	bl	80048e4 <memchr>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d045      	beq.n	8004434 <_vfiprintf_r+0x240>
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <_vfiprintf_r+0x26c>)
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d127      	bne.n	80043fe <_vfiprintf_r+0x20a>
 80043ae:	2207      	movs	r2, #7
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	3307      	adds	r3, #7
 80043b4:	4393      	bics	r3, r2
 80043b6:	3308      	adds	r3, #8
 80043b8:	9307      	str	r3, [sp, #28]
 80043ba:	696b      	ldr	r3, [r5, #20]
 80043bc:	9a04      	ldr	r2, [sp, #16]
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	616b      	str	r3, [r5, #20]
 80043c2:	e75d      	b.n	8004280 <_vfiprintf_r+0x8c>
 80043c4:	210a      	movs	r1, #10
 80043c6:	434b      	muls	r3, r1
 80043c8:	4667      	mov	r7, ip
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	3909      	subs	r1, #9
 80043ce:	e7a3      	b.n	8004318 <_vfiprintf_r+0x124>
 80043d0:	2301      	movs	r3, #1
 80043d2:	425b      	negs	r3, r3
 80043d4:	e7ce      	b.n	8004374 <_vfiprintf_r+0x180>
 80043d6:	2300      	movs	r3, #0
 80043d8:	001a      	movs	r2, r3
 80043da:	3701      	adds	r7, #1
 80043dc:	606b      	str	r3, [r5, #4]
 80043de:	7839      	ldrb	r1, [r7, #0]
 80043e0:	1c78      	adds	r0, r7, #1
 80043e2:	3930      	subs	r1, #48	; 0x30
 80043e4:	4684      	mov	ip, r0
 80043e6:	2909      	cmp	r1, #9
 80043e8:	d903      	bls.n	80043f2 <_vfiprintf_r+0x1fe>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0c3      	beq.n	8004376 <_vfiprintf_r+0x182>
 80043ee:	9209      	str	r2, [sp, #36]	; 0x24
 80043f0:	e7c1      	b.n	8004376 <_vfiprintf_r+0x182>
 80043f2:	230a      	movs	r3, #10
 80043f4:	435a      	muls	r2, r3
 80043f6:	4667      	mov	r7, ip
 80043f8:	1852      	adds	r2, r2, r1
 80043fa:	3b09      	subs	r3, #9
 80043fc:	e7ef      	b.n	80043de <_vfiprintf_r+0x1ea>
 80043fe:	ab07      	add	r3, sp, #28
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	0022      	movs	r2, r4
 8004404:	0029      	movs	r1, r5
 8004406:	0030      	movs	r0, r6
 8004408:	4b16      	ldr	r3, [pc, #88]	; (8004464 <_vfiprintf_r+0x270>)
 800440a:	e000      	b.n	800440e <_vfiprintf_r+0x21a>
 800440c:	bf00      	nop
 800440e:	9004      	str	r0, [sp, #16]
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	3301      	adds	r3, #1
 8004414:	d1d1      	bne.n	80043ba <_vfiprintf_r+0x1c6>
 8004416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004418:	07db      	lsls	r3, r3, #31
 800441a:	d405      	bmi.n	8004428 <_vfiprintf_r+0x234>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	059b      	lsls	r3, r3, #22
 8004420:	d402      	bmi.n	8004428 <_vfiprintf_r+0x234>
 8004422:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004424:	f7ff fd6e 	bl	8003f04 <__retarget_lock_release_recursive>
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	065b      	lsls	r3, r3, #25
 800442c:	d500      	bpl.n	8004430 <_vfiprintf_r+0x23c>
 800442e:	e70a      	b.n	8004246 <_vfiprintf_r+0x52>
 8004430:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004432:	e70a      	b.n	800424a <_vfiprintf_r+0x56>
 8004434:	ab07      	add	r3, sp, #28
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	0022      	movs	r2, r4
 800443a:	0029      	movs	r1, r5
 800443c:	0030      	movs	r0, r6
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <_vfiprintf_r+0x270>)
 8004440:	f000 f882 	bl	8004548 <_printf_i>
 8004444:	e7e3      	b.n	800440e <_vfiprintf_r+0x21a>
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	0800686c 	.word	0x0800686c
 800444c:	0800688c 	.word	0x0800688c
 8004450:	0800684c 	.word	0x0800684c
 8004454:	080068ac 	.word	0x080068ac
 8004458:	080068b2 	.word	0x080068b2
 800445c:	080068b6 	.word	0x080068b6
 8004460:	00000000 	.word	0x00000000
 8004464:	080041cf 	.word	0x080041cf

08004468 <_printf_common>:
 8004468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800446a:	0015      	movs	r5, r2
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	688a      	ldr	r2, [r1, #8]
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	000c      	movs	r4, r1
 8004474:	9000      	str	r0, [sp, #0]
 8004476:	4293      	cmp	r3, r2
 8004478:	da00      	bge.n	800447c <_printf_common+0x14>
 800447a:	0013      	movs	r3, r2
 800447c:	0022      	movs	r2, r4
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	3243      	adds	r2, #67	; 0x43
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	2a00      	cmp	r2, #0
 8004486:	d001      	beq.n	800448c <_printf_common+0x24>
 8004488:	3301      	adds	r3, #1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	d502      	bpl.n	8004498 <_printf_common+0x30>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	3302      	adds	r3, #2
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	2306      	movs	r3, #6
 800449c:	0017      	movs	r7, r2
 800449e:	401f      	ands	r7, r3
 80044a0:	421a      	tst	r2, r3
 80044a2:	d027      	beq.n	80044f4 <_printf_common+0x8c>
 80044a4:	0023      	movs	r3, r4
 80044a6:	3343      	adds	r3, #67	; 0x43
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	1e5a      	subs	r2, r3, #1
 80044ac:	4193      	sbcs	r3, r2
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	0692      	lsls	r2, r2, #26
 80044b2:	d430      	bmi.n	8004516 <_printf_common+0xae>
 80044b4:	0022      	movs	r2, r4
 80044b6:	9901      	ldr	r1, [sp, #4]
 80044b8:	9800      	ldr	r0, [sp, #0]
 80044ba:	9e08      	ldr	r6, [sp, #32]
 80044bc:	3243      	adds	r2, #67	; 0x43
 80044be:	47b0      	blx	r6
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d025      	beq.n	8004510 <_printf_common+0xa8>
 80044c4:	2306      	movs	r3, #6
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	682a      	ldr	r2, [r5, #0]
 80044ca:	68e1      	ldr	r1, [r4, #12]
 80044cc:	2500      	movs	r5, #0
 80044ce:	4003      	ands	r3, r0
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d103      	bne.n	80044dc <_printf_common+0x74>
 80044d4:	1a8d      	subs	r5, r1, r2
 80044d6:	43eb      	mvns	r3, r5
 80044d8:	17db      	asrs	r3, r3, #31
 80044da:	401d      	ands	r5, r3
 80044dc:	68a3      	ldr	r3, [r4, #8]
 80044de:	6922      	ldr	r2, [r4, #16]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	dd01      	ble.n	80044e8 <_printf_common+0x80>
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	18ed      	adds	r5, r5, r3
 80044e8:	2700      	movs	r7, #0
 80044ea:	42bd      	cmp	r5, r7
 80044ec:	d120      	bne.n	8004530 <_printf_common+0xc8>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e010      	b.n	8004514 <_printf_common+0xac>
 80044f2:	3701      	adds	r7, #1
 80044f4:	68e3      	ldr	r3, [r4, #12]
 80044f6:	682a      	ldr	r2, [r5, #0]
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	42bb      	cmp	r3, r7
 80044fc:	ddd2      	ble.n	80044a4 <_printf_common+0x3c>
 80044fe:	0022      	movs	r2, r4
 8004500:	2301      	movs	r3, #1
 8004502:	9901      	ldr	r1, [sp, #4]
 8004504:	9800      	ldr	r0, [sp, #0]
 8004506:	9e08      	ldr	r6, [sp, #32]
 8004508:	3219      	adds	r2, #25
 800450a:	47b0      	blx	r6
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d1f0      	bne.n	80044f2 <_printf_common+0x8a>
 8004510:	2001      	movs	r0, #1
 8004512:	4240      	negs	r0, r0
 8004514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004516:	2030      	movs	r0, #48	; 0x30
 8004518:	18e1      	adds	r1, r4, r3
 800451a:	3143      	adds	r1, #67	; 0x43
 800451c:	7008      	strb	r0, [r1, #0]
 800451e:	0021      	movs	r1, r4
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	3145      	adds	r1, #69	; 0x45
 8004524:	7809      	ldrb	r1, [r1, #0]
 8004526:	18a2      	adds	r2, r4, r2
 8004528:	3243      	adds	r2, #67	; 0x43
 800452a:	3302      	adds	r3, #2
 800452c:	7011      	strb	r1, [r2, #0]
 800452e:	e7c1      	b.n	80044b4 <_printf_common+0x4c>
 8004530:	0022      	movs	r2, r4
 8004532:	2301      	movs	r3, #1
 8004534:	9901      	ldr	r1, [sp, #4]
 8004536:	9800      	ldr	r0, [sp, #0]
 8004538:	9e08      	ldr	r6, [sp, #32]
 800453a:	321a      	adds	r2, #26
 800453c:	47b0      	blx	r6
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	d0e6      	beq.n	8004510 <_printf_common+0xa8>
 8004542:	3701      	adds	r7, #1
 8004544:	e7d1      	b.n	80044ea <_printf_common+0x82>
	...

08004548 <_printf_i>:
 8004548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454a:	b08b      	sub	sp, #44	; 0x2c
 800454c:	9206      	str	r2, [sp, #24]
 800454e:	000a      	movs	r2, r1
 8004550:	3243      	adds	r2, #67	; 0x43
 8004552:	9307      	str	r3, [sp, #28]
 8004554:	9005      	str	r0, [sp, #20]
 8004556:	9204      	str	r2, [sp, #16]
 8004558:	7e0a      	ldrb	r2, [r1, #24]
 800455a:	000c      	movs	r4, r1
 800455c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800455e:	2a78      	cmp	r2, #120	; 0x78
 8004560:	d807      	bhi.n	8004572 <_printf_i+0x2a>
 8004562:	2a62      	cmp	r2, #98	; 0x62
 8004564:	d809      	bhi.n	800457a <_printf_i+0x32>
 8004566:	2a00      	cmp	r2, #0
 8004568:	d100      	bne.n	800456c <_printf_i+0x24>
 800456a:	e0c1      	b.n	80046f0 <_printf_i+0x1a8>
 800456c:	2a58      	cmp	r2, #88	; 0x58
 800456e:	d100      	bne.n	8004572 <_printf_i+0x2a>
 8004570:	e08c      	b.n	800468c <_printf_i+0x144>
 8004572:	0026      	movs	r6, r4
 8004574:	3642      	adds	r6, #66	; 0x42
 8004576:	7032      	strb	r2, [r6, #0]
 8004578:	e022      	b.n	80045c0 <_printf_i+0x78>
 800457a:	0010      	movs	r0, r2
 800457c:	3863      	subs	r0, #99	; 0x63
 800457e:	2815      	cmp	r0, #21
 8004580:	d8f7      	bhi.n	8004572 <_printf_i+0x2a>
 8004582:	f7fb fdc1 	bl	8000108 <__gnu_thumb1_case_shi>
 8004586:	0016      	.short	0x0016
 8004588:	fff6001f 	.word	0xfff6001f
 800458c:	fff6fff6 	.word	0xfff6fff6
 8004590:	001ffff6 	.word	0x001ffff6
 8004594:	fff6fff6 	.word	0xfff6fff6
 8004598:	fff6fff6 	.word	0xfff6fff6
 800459c:	003600a8 	.word	0x003600a8
 80045a0:	fff6009a 	.word	0xfff6009a
 80045a4:	00b9fff6 	.word	0x00b9fff6
 80045a8:	0036fff6 	.word	0x0036fff6
 80045ac:	fff6fff6 	.word	0xfff6fff6
 80045b0:	009e      	.short	0x009e
 80045b2:	0026      	movs	r6, r4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	3642      	adds	r6, #66	; 0x42
 80045b8:	1d11      	adds	r1, r2, #4
 80045ba:	6019      	str	r1, [r3, #0]
 80045bc:	6813      	ldr	r3, [r2, #0]
 80045be:	7033      	strb	r3, [r6, #0]
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0a7      	b.n	8004714 <_printf_i+0x1cc>
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	1d0a      	adds	r2, r1, #4
 80045ca:	0605      	lsls	r5, r0, #24
 80045cc:	d50b      	bpl.n	80045e6 <_printf_i+0x9e>
 80045ce:	680d      	ldr	r5, [r1, #0]
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	2d00      	cmp	r5, #0
 80045d4:	da03      	bge.n	80045de <_printf_i+0x96>
 80045d6:	232d      	movs	r3, #45	; 0x2d
 80045d8:	9a04      	ldr	r2, [sp, #16]
 80045da:	426d      	negs	r5, r5
 80045dc:	7013      	strb	r3, [r2, #0]
 80045de:	4b61      	ldr	r3, [pc, #388]	; (8004764 <_printf_i+0x21c>)
 80045e0:	270a      	movs	r7, #10
 80045e2:	9303      	str	r3, [sp, #12]
 80045e4:	e01b      	b.n	800461e <_printf_i+0xd6>
 80045e6:	680d      	ldr	r5, [r1, #0]
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	0641      	lsls	r1, r0, #25
 80045ec:	d5f1      	bpl.n	80045d2 <_printf_i+0x8a>
 80045ee:	b22d      	sxth	r5, r5
 80045f0:	e7ef      	b.n	80045d2 <_printf_i+0x8a>
 80045f2:	680d      	ldr	r5, [r1, #0]
 80045f4:	6819      	ldr	r1, [r3, #0]
 80045f6:	1d08      	adds	r0, r1, #4
 80045f8:	6018      	str	r0, [r3, #0]
 80045fa:	062e      	lsls	r6, r5, #24
 80045fc:	d501      	bpl.n	8004602 <_printf_i+0xba>
 80045fe:	680d      	ldr	r5, [r1, #0]
 8004600:	e003      	b.n	800460a <_printf_i+0xc2>
 8004602:	066d      	lsls	r5, r5, #25
 8004604:	d5fb      	bpl.n	80045fe <_printf_i+0xb6>
 8004606:	680d      	ldr	r5, [r1, #0]
 8004608:	b2ad      	uxth	r5, r5
 800460a:	4b56      	ldr	r3, [pc, #344]	; (8004764 <_printf_i+0x21c>)
 800460c:	2708      	movs	r7, #8
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	2a6f      	cmp	r2, #111	; 0x6f
 8004612:	d000      	beq.n	8004616 <_printf_i+0xce>
 8004614:	3702      	adds	r7, #2
 8004616:	0023      	movs	r3, r4
 8004618:	2200      	movs	r2, #0
 800461a:	3343      	adds	r3, #67	; 0x43
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	60a3      	str	r3, [r4, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	db03      	blt.n	800462e <_printf_i+0xe6>
 8004626:	2204      	movs	r2, #4
 8004628:	6821      	ldr	r1, [r4, #0]
 800462a:	4391      	bics	r1, r2
 800462c:	6021      	str	r1, [r4, #0]
 800462e:	2d00      	cmp	r5, #0
 8004630:	d102      	bne.n	8004638 <_printf_i+0xf0>
 8004632:	9e04      	ldr	r6, [sp, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <_printf_i+0x10a>
 8004638:	9e04      	ldr	r6, [sp, #16]
 800463a:	0028      	movs	r0, r5
 800463c:	0039      	movs	r1, r7
 800463e:	f7fb fdf3 	bl	8000228 <__aeabi_uidivmod>
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	3e01      	subs	r6, #1
 8004646:	5c5b      	ldrb	r3, [r3, r1]
 8004648:	7033      	strb	r3, [r6, #0]
 800464a:	002b      	movs	r3, r5
 800464c:	0005      	movs	r5, r0
 800464e:	429f      	cmp	r7, r3
 8004650:	d9f3      	bls.n	800463a <_printf_i+0xf2>
 8004652:	2f08      	cmp	r7, #8
 8004654:	d109      	bne.n	800466a <_printf_i+0x122>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	07db      	lsls	r3, r3, #31
 800465a:	d506      	bpl.n	800466a <_printf_i+0x122>
 800465c:	6863      	ldr	r3, [r4, #4]
 800465e:	6922      	ldr	r2, [r4, #16]
 8004660:	4293      	cmp	r3, r2
 8004662:	dc02      	bgt.n	800466a <_printf_i+0x122>
 8004664:	2330      	movs	r3, #48	; 0x30
 8004666:	3e01      	subs	r6, #1
 8004668:	7033      	strb	r3, [r6, #0]
 800466a:	9b04      	ldr	r3, [sp, #16]
 800466c:	1b9b      	subs	r3, r3, r6
 800466e:	6123      	str	r3, [r4, #16]
 8004670:	9b07      	ldr	r3, [sp, #28]
 8004672:	0021      	movs	r1, r4
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	9805      	ldr	r0, [sp, #20]
 8004678:	9b06      	ldr	r3, [sp, #24]
 800467a:	aa09      	add	r2, sp, #36	; 0x24
 800467c:	f7ff fef4 	bl	8004468 <_printf_common>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d14c      	bne.n	800471e <_printf_i+0x1d6>
 8004684:	2001      	movs	r0, #1
 8004686:	4240      	negs	r0, r0
 8004688:	b00b      	add	sp, #44	; 0x2c
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468c:	3145      	adds	r1, #69	; 0x45
 800468e:	700a      	strb	r2, [r1, #0]
 8004690:	4a34      	ldr	r2, [pc, #208]	; (8004764 <_printf_i+0x21c>)
 8004692:	9203      	str	r2, [sp, #12]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	6821      	ldr	r1, [r4, #0]
 8004698:	ca20      	ldmia	r2!, {r5}
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	0608      	lsls	r0, r1, #24
 800469e:	d516      	bpl.n	80046ce <_printf_i+0x186>
 80046a0:	07cb      	lsls	r3, r1, #31
 80046a2:	d502      	bpl.n	80046aa <_printf_i+0x162>
 80046a4:	2320      	movs	r3, #32
 80046a6:	4319      	orrs	r1, r3
 80046a8:	6021      	str	r1, [r4, #0]
 80046aa:	2710      	movs	r7, #16
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d1b2      	bne.n	8004616 <_printf_i+0xce>
 80046b0:	2320      	movs	r3, #32
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	439a      	bics	r2, r3
 80046b6:	6022      	str	r2, [r4, #0]
 80046b8:	e7ad      	b.n	8004616 <_printf_i+0xce>
 80046ba:	2220      	movs	r2, #32
 80046bc:	6809      	ldr	r1, [r1, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	6022      	str	r2, [r4, #0]
 80046c2:	0022      	movs	r2, r4
 80046c4:	2178      	movs	r1, #120	; 0x78
 80046c6:	3245      	adds	r2, #69	; 0x45
 80046c8:	7011      	strb	r1, [r2, #0]
 80046ca:	4a27      	ldr	r2, [pc, #156]	; (8004768 <_printf_i+0x220>)
 80046cc:	e7e1      	b.n	8004692 <_printf_i+0x14a>
 80046ce:	0648      	lsls	r0, r1, #25
 80046d0:	d5e6      	bpl.n	80046a0 <_printf_i+0x158>
 80046d2:	b2ad      	uxth	r5, r5
 80046d4:	e7e4      	b.n	80046a0 <_printf_i+0x158>
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	680d      	ldr	r5, [r1, #0]
 80046da:	1d10      	adds	r0, r2, #4
 80046dc:	6949      	ldr	r1, [r1, #20]
 80046de:	6018      	str	r0, [r3, #0]
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	062e      	lsls	r6, r5, #24
 80046e4:	d501      	bpl.n	80046ea <_printf_i+0x1a2>
 80046e6:	6019      	str	r1, [r3, #0]
 80046e8:	e002      	b.n	80046f0 <_printf_i+0x1a8>
 80046ea:	066d      	lsls	r5, r5, #25
 80046ec:	d5fb      	bpl.n	80046e6 <_printf_i+0x19e>
 80046ee:	8019      	strh	r1, [r3, #0]
 80046f0:	2300      	movs	r3, #0
 80046f2:	9e04      	ldr	r6, [sp, #16]
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	e7bb      	b.n	8004670 <_printf_i+0x128>
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	1d11      	adds	r1, r2, #4
 80046fc:	6019      	str	r1, [r3, #0]
 80046fe:	6816      	ldr	r6, [r2, #0]
 8004700:	2100      	movs	r1, #0
 8004702:	0030      	movs	r0, r6
 8004704:	6862      	ldr	r2, [r4, #4]
 8004706:	f000 f8ed 	bl	80048e4 <memchr>
 800470a:	2800      	cmp	r0, #0
 800470c:	d001      	beq.n	8004712 <_printf_i+0x1ca>
 800470e:	1b80      	subs	r0, r0, r6
 8004710:	6060      	str	r0, [r4, #4]
 8004712:	6863      	ldr	r3, [r4, #4]
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	2300      	movs	r3, #0
 8004718:	9a04      	ldr	r2, [sp, #16]
 800471a:	7013      	strb	r3, [r2, #0]
 800471c:	e7a8      	b.n	8004670 <_printf_i+0x128>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	0032      	movs	r2, r6
 8004722:	9906      	ldr	r1, [sp, #24]
 8004724:	9805      	ldr	r0, [sp, #20]
 8004726:	9d07      	ldr	r5, [sp, #28]
 8004728:	47a8      	blx	r5
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	d0aa      	beq.n	8004684 <_printf_i+0x13c>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	079b      	lsls	r3, r3, #30
 8004732:	d415      	bmi.n	8004760 <_printf_i+0x218>
 8004734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004736:	68e0      	ldr	r0, [r4, #12]
 8004738:	4298      	cmp	r0, r3
 800473a:	daa5      	bge.n	8004688 <_printf_i+0x140>
 800473c:	0018      	movs	r0, r3
 800473e:	e7a3      	b.n	8004688 <_printf_i+0x140>
 8004740:	0022      	movs	r2, r4
 8004742:	2301      	movs	r3, #1
 8004744:	9906      	ldr	r1, [sp, #24]
 8004746:	9805      	ldr	r0, [sp, #20]
 8004748:	9e07      	ldr	r6, [sp, #28]
 800474a:	3219      	adds	r2, #25
 800474c:	47b0      	blx	r6
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	d098      	beq.n	8004684 <_printf_i+0x13c>
 8004752:	3501      	adds	r5, #1
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	42ab      	cmp	r3, r5
 800475c:	dcf0      	bgt.n	8004740 <_printf_i+0x1f8>
 800475e:	e7e9      	b.n	8004734 <_printf_i+0x1ec>
 8004760:	2500      	movs	r5, #0
 8004762:	e7f7      	b.n	8004754 <_printf_i+0x20c>
 8004764:	080068bd 	.word	0x080068bd
 8004768:	080068ce 	.word	0x080068ce

0800476c <_sbrk_r>:
 800476c:	2300      	movs	r3, #0
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	4d06      	ldr	r5, [pc, #24]	; (800478c <_sbrk_r+0x20>)
 8004772:	0004      	movs	r4, r0
 8004774:	0008      	movs	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fc fdf2 	bl	8001360 <_sbrk>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d103      	bne.n	8004788 <_sbrk_r+0x1c>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d000      	beq.n	8004788 <_sbrk_r+0x1c>
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	bd70      	pop	{r4, r5, r6, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20003c30 	.word	0x20003c30

08004790 <__sread>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	000c      	movs	r4, r1
 8004794:	250e      	movs	r5, #14
 8004796:	5f49      	ldrsh	r1, [r1, r5]
 8004798:	f000 f8c0 	bl	800491c <_read_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	db03      	blt.n	80047a8 <__sread+0x18>
 80047a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047a2:	181b      	adds	r3, r3, r0
 80047a4:	6563      	str	r3, [r4, #84]	; 0x54
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <__sread+0x24>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	e7f9      	b.n	80047a6 <__sread+0x16>
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	ffffefff 	.word	0xffffefff

080047b8 <__swrite>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	001f      	movs	r7, r3
 80047bc:	898b      	ldrh	r3, [r1, #12]
 80047be:	0005      	movs	r5, r0
 80047c0:	000c      	movs	r4, r1
 80047c2:	0016      	movs	r6, r2
 80047c4:	05db      	lsls	r3, r3, #23
 80047c6:	d505      	bpl.n	80047d4 <__swrite+0x1c>
 80047c8:	230e      	movs	r3, #14
 80047ca:	5ec9      	ldrsh	r1, [r1, r3]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2302      	movs	r3, #2
 80047d0:	f000 f874 	bl	80048bc <_lseek_r>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	4a05      	ldr	r2, [pc, #20]	; (80047ec <__swrite+0x34>)
 80047d8:	0028      	movs	r0, r5
 80047da:	4013      	ands	r3, r2
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	0032      	movs	r2, r6
 80047e0:	230e      	movs	r3, #14
 80047e2:	5ee1      	ldrsh	r1, [r4, r3]
 80047e4:	003b      	movs	r3, r7
 80047e6:	f000 f81f 	bl	8004828 <_write_r>
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ec:	ffffefff 	.word	0xffffefff

080047f0 <__sseek>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	000c      	movs	r4, r1
 80047f4:	250e      	movs	r5, #14
 80047f6:	5f49      	ldrsh	r1, [r1, r5]
 80047f8:	f000 f860 	bl	80048bc <_lseek_r>
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	1c42      	adds	r2, r0, #1
 8004800:	d103      	bne.n	800480a <__sseek+0x1a>
 8004802:	4a05      	ldr	r2, [pc, #20]	; (8004818 <__sseek+0x28>)
 8004804:	4013      	ands	r3, r2
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	bd70      	pop	{r4, r5, r6, pc}
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	0152      	lsls	r2, r2, #5
 800480e:	4313      	orrs	r3, r2
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	6560      	str	r0, [r4, #84]	; 0x54
 8004814:	e7f8      	b.n	8004808 <__sseek+0x18>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	ffffefff 	.word	0xffffefff

0800481c <__sclose>:
 800481c:	b510      	push	{r4, lr}
 800481e:	230e      	movs	r3, #14
 8004820:	5ec9      	ldrsh	r1, [r1, r3]
 8004822:	f000 f815 	bl	8004850 <_close_r>
 8004826:	bd10      	pop	{r4, pc}

08004828 <_write_r>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	0004      	movs	r4, r0
 800482c:	0008      	movs	r0, r1
 800482e:	0011      	movs	r1, r2
 8004830:	001a      	movs	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	4d05      	ldr	r5, [pc, #20]	; (800484c <_write_r+0x24>)
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	f7fc fd4a 	bl	80012d0 <_write>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d103      	bne.n	8004848 <_write_r+0x20>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d000      	beq.n	8004848 <_write_r+0x20>
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	bd70      	pop	{r4, r5, r6, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	20003c30 	.word	0x20003c30

08004850 <_close_r>:
 8004850:	2300      	movs	r3, #0
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	4d06      	ldr	r5, [pc, #24]	; (8004870 <_close_r+0x20>)
 8004856:	0004      	movs	r4, r0
 8004858:	0008      	movs	r0, r1
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	f7fc fd54 	bl	8001308 <_close>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d103      	bne.n	800486c <_close_r+0x1c>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d000      	beq.n	800486c <_close_r+0x1c>
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20003c30 	.word	0x20003c30

08004874 <_fstat_r>:
 8004874:	2300      	movs	r3, #0
 8004876:	b570      	push	{r4, r5, r6, lr}
 8004878:	4d06      	ldr	r5, [pc, #24]	; (8004894 <_fstat_r+0x20>)
 800487a:	0004      	movs	r4, r0
 800487c:	0008      	movs	r0, r1
 800487e:	0011      	movs	r1, r2
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	f7fc fd4b 	bl	800131c <_fstat>
 8004886:	1c43      	adds	r3, r0, #1
 8004888:	d103      	bne.n	8004892 <_fstat_r+0x1e>
 800488a:	682b      	ldr	r3, [r5, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d000      	beq.n	8004892 <_fstat_r+0x1e>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	20003c30 	.word	0x20003c30

08004898 <_isatty_r>:
 8004898:	2300      	movs	r3, #0
 800489a:	b570      	push	{r4, r5, r6, lr}
 800489c:	4d06      	ldr	r5, [pc, #24]	; (80048b8 <_isatty_r+0x20>)
 800489e:	0004      	movs	r4, r0
 80048a0:	0008      	movs	r0, r1
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	f7fc fd48 	bl	8001338 <_isatty>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d103      	bne.n	80048b4 <_isatty_r+0x1c>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d000      	beq.n	80048b4 <_isatty_r+0x1c>
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	20003c30 	.word	0x20003c30

080048bc <_lseek_r>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	0004      	movs	r4, r0
 80048c0:	0008      	movs	r0, r1
 80048c2:	0011      	movs	r1, r2
 80048c4:	001a      	movs	r2, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	4d05      	ldr	r5, [pc, #20]	; (80048e0 <_lseek_r+0x24>)
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	f7fc fd3d 	bl	800134a <_lseek>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d103      	bne.n	80048dc <_lseek_r+0x20>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d000      	beq.n	80048dc <_lseek_r+0x20>
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	20003c30 	.word	0x20003c30

080048e4 <memchr>:
 80048e4:	b2c9      	uxtb	r1, r1
 80048e6:	1882      	adds	r2, r0, r2
 80048e8:	4290      	cmp	r0, r2
 80048ea:	d101      	bne.n	80048f0 <memchr+0xc>
 80048ec:	2000      	movs	r0, #0
 80048ee:	4770      	bx	lr
 80048f0:	7803      	ldrb	r3, [r0, #0]
 80048f2:	428b      	cmp	r3, r1
 80048f4:	d0fb      	beq.n	80048ee <memchr+0xa>
 80048f6:	3001      	adds	r0, #1
 80048f8:	e7f6      	b.n	80048e8 <memchr+0x4>
	...

080048fc <__malloc_lock>:
 80048fc:	b510      	push	{r4, lr}
 80048fe:	4802      	ldr	r0, [pc, #8]	; (8004908 <__malloc_lock+0xc>)
 8004900:	f7ff faff 	bl	8003f02 <__retarget_lock_acquire_recursive>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	20003c24 	.word	0x20003c24

0800490c <__malloc_unlock>:
 800490c:	b510      	push	{r4, lr}
 800490e:	4802      	ldr	r0, [pc, #8]	; (8004918 <__malloc_unlock+0xc>)
 8004910:	f7ff faf8 	bl	8003f04 <__retarget_lock_release_recursive>
 8004914:	bd10      	pop	{r4, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	20003c24 	.word	0x20003c24

0800491c <_read_r>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	0004      	movs	r4, r0
 8004920:	0008      	movs	r0, r1
 8004922:	0011      	movs	r1, r2
 8004924:	001a      	movs	r2, r3
 8004926:	2300      	movs	r3, #0
 8004928:	4d05      	ldr	r5, [pc, #20]	; (8004940 <_read_r+0x24>)
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	f7fc fcb3 	bl	8001296 <_read>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d103      	bne.n	800493c <_read_r+0x20>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d000      	beq.n	800493c <_read_r+0x20>
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	20003c30 	.word	0x20003c30

08004944 <_init>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr

08004950 <_fini>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr
